Day 8:
Collections
---------------
List
	Vector			(legacy class)
	ArrayList
	LinkedList
Set
	HashSet
	TreeSet
	LinkedHashSet

Map		is not a collection. It is application of collection
	Hashtable			(legacy class)
	HashMap
	TreeMap
	LinkedHashMap
	
	
Legacy classes are synchronized
	Vector
	Hashtable


Comparable
Comparator
-----------------------------------------------------------------------
List vs Set
	List allows duplicates.		Set rejects duplicates
	List maintains the order of elements in which we added.
	Set maintains its own order based on the type of set.
	
How duplicates can be identified?
	a and b are objects of Employee.
	a.equals(b)	returns true means, a and be are duplicates.

----------------------------------------------------
List
	ArrayList
	LinkedList



Upto jdk 1.4, the collections were not generic.
All collections were Object type only.

ArrayList marks=new ArrayList();		//all elements were Object type only.

once jdk 1.5 was introducted, then the collection are generics.
ArrayList<String> countries=new ArrayList<String>();	//jdk 1.5, 1.6

ArrayList<String> countries=new ArrayList<>();	//jdk 1.7 onwards


jdk 1.4 or earlier
		ArrayList marks=new ArrayList();
		marks.add(new Integer(20));
		marks.add("India");
		marks.add(new Float(2.2f));
		// the above code is in jdk 1.4			non-generics


----------------jdk 1.5
ArrayList<Integer> marks=new ArrayList<Integer>();
		//the above arraylist allows only Integer type elements
		marks.add(20);
		marks.add(new Integer(22));
		int i=marks.get(0).intValue();


----------------
jdk1.7 onwards
ArrayList<Integer> marks=new ArrayList<>();


------------------------
List
	methods
		add()
		remove()
		get()
		set(index,element)		vs 	add(index,element)

identify as many methods and properties of List

In list, add() method adds the element at the end of the list
In set, add() method adds the element at the position based on the type of Set



How to access all elements of a list?
	i) for each loop
		for(College c:collegeList)
		{
			System.out.println(c);
		}

	ii) normal for loop
		for(int i=0;i<collegeList.size();i++)
		{
			System.out.println(collegeList.get(i));
		}
	//get(index) works only for List category collections. Set collections do not have index

	iii) using iterator
		iterator has only 3 methods
			hasNext()		boolean		true/false
			next()		returns next element
			remove()		removes current element

		List supports ListIterator	which can move reverse also
			hasNext()
			hasPrevious()
			next()
			previous()
			remove()	

	ListIterator does not work for Set.	It works only for List

		Iterator<College> it = collegeList.iterator();
		while(it.hasNext())
		{
			College c = it.next();
			System.out.println(c);
		}





		ListIterator<College> it = collegeList.listIterator(collegeList.size());
//		while(it.hasNext())
//		{
////			College c = it.next();
////			System.out.println(c);
////		}
//		
		while(it.hasPrevious())
		{
			College c = it.previous();
			System.out.println(c);
		}



--------------
Removing an element in a collection by using loop:
for(College c: collegeList)
{
	if(c.getName().equals(name))
	{
		collegeList.remove(c);    //error:	ConcurrentModificationException
	}
}
//so we should use iterator to remove

\Java\mock-11-req-2\src

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class College {
	private String name;
	private String website;
	private String mobile;
	private String founder;
	private Integer numberOfDept;
	private String location;
	private Date startingDate;
	
	public College() {}

	public College(String name, String website, String mobile, String founder, Integer numberOfDept, String location,
			Date startingDate) {
		super();
		this.name = name;
		this.website = website;
		this.mobile = mobile;
		this.founder = founder;
		this.numberOfDept = numberOfDept;
		this.location = location;
		this.startingDate = startingDate;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getWebsite() {
		return website;
	}

	public void setWebsite(String website) {
		this.website = website;
	}

	public String getMobile() {
		return mobile;
	}

	public void setMobile(String mobile) {
		this.mobile = mobile;
	}

	public String getFounder() {
		return founder;
	}

	public void setFounder(String founder) {
		this.founder = founder;
	}

	public Integer getNumberOfDept() {
		return numberOfDept;
	}

	public void setNumberOfDept(Integer numberOfDept) {
		this.numberOfDept = numberOfDept;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public Date getStartingDate() {
		return startingDate;
	}

	public void setStartingDate(Date startingDate) {
		this.startingDate = startingDate;
	}
	
	public static College createCollege(String detail)
	{
//		IIT Madras,http.iitm.ac.in,7845612390, iit ,16,Tamil Nadu,15-12-1959
		
		String[] arr = detail.split(",");
		College college=new College();
		college.setName(arr[0]);
		college.setWebsite(arr[1]);
		college.setMobile(arr[2]);
		college.setFounder(arr[3]);
		college.setNumberOfDept(Integer.parseInt(arr[4]));
		college.setLocation(arr[5]);
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		//to convert a String into Date
		Date startingDate=null;
		try {
			startingDate=sdf.parse(arr[6]);
		} catch (ParseException e) {
			System.out.println("Date is not valid");
		}
		
		college.setStartingDate(startingDate);
		
		return college;
	}
	
	
	
	
}


--------------------------
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;

public class University {
	private String name;
	private List<College> collegeList=new ArrayList<>();
	
	public University() {
//		collegeList=new ArrayList<College>();
	}

	public University(String name, List<College> collegeList) {
		super();
		this.name = name;
		this.collegeList = collegeList;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<College> getCollegeList() {
		return collegeList;
	}

	public void setCollegeList(List<College> collegeList) {
		this.collegeList = collegeList;
	}
	

	
	
	public void addCollegeToUniversity(College college) {
		collegeList.add(college);
//		System.out.println("College successfully added");
	}
	public Boolean removeCollege(String name) {
		Iterator<College> it = collegeList.iterator();
		while(it.hasNext())
		{
			College c=it.next();
			if(c.getName().equals(name))
			{
				it.remove();
//				System.out.println("College successfully deleted");
				return true;
			}
		}
//		System.out.println("College not found in the University");
		return false;		
	}
	public void displayColleges() {
		
		if(collegeList.isEmpty())
		{
			System.out.println("No colleges to show");
			return;
		}
		System.out.println("Colleges in "+getName());
		System.out.format("%-15s%-20s%-15s%-15s%-15s%-15s%-15s\n", "Name","Website","Mobile","Founder","Number of Dept","Location","Starting Date");
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");

		for(College c:collegeList)
		{
			System.out.format("%-15s%-20s%-15s%-15s%-15s%-15s%-15s\n", c.getName(),c.getWebsite(),c.getMobile(),c.getFounder(),c.getNumberOfDept(),c.getLocation(),sdf.format(c.getStartingDate()));
		}
		
//		for(int i=0;i<collegeList.size();i++)
//		{
//			System.out.println(collegeList.get(i));
//		}
		
//		ListIterator<College> it = collegeList.listIterator(collegeList.size());
//		while(it.hasNext())
//		{
////			College c = it.next();
////			System.out.println(c);
////		}
//		
//		while(it.hasPrevious())
//		{
//			College c = it.previous();
//			System.out.println(c);
//		}
	}

}
-----------------------------------------
import java.util.Scanner;

public class App {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the name of the University: ");
		String universityName=sc.nextLine();
		University university=new University();
		university.setName(universityName);
		do
		{
			System.out.println("1.Add College \r\n" + 
					"2.Delete College \r\n" + 
					"3.Display Colleges \r\n" + 
					"4.Exit \r\n" + 
					"Enter your choice: \r\n" + 
					"");
			int choice=sc.nextInt();
			switch(choice)
			{
			case 1:	//add
				String detail=sc.nextLine();
				if(detail.equals(""))
					detail=sc.nextLine();
				College college=College.createCollege(detail);
				university.addCollegeToUniversity(college);
				System.out.println("College successfully added");
				break;
			case 2:	//delete
				System.out.println("Enter the name of the college to be deleted: ");
				String collegeName=sc.nextLine();
				if(collegeName.equals(""))
					collegeName=sc.nextLine();
				Boolean status = university.removeCollege(collegeName);
				if(status)
				{
					System.out.println("College successfully deleted");
				}else
				{
					System.out.println("College not found in the University");
				}
				break;
			case 3: //display
				university.displayColleges();
				break;
			case 4:
				System.exit(0);
				break;
			}
		}while(true);
	}

}

----------------------------------
Task:
Java_Mock_29_NoPrefill.docx
	Requirement #2

Late comers of break: after 11 am	------------------------------
vengalatha M
Gowrika T.K.
RAMYA SHREE R
chaitra I
NIHARIKA.N
Komal GD
------------------------------------------
Set
--------
	is a collection of distinct elements
	HashSet
		the order or elements are determined by the hashCode method
		the  duplicates are identified by equals method
		so if we use HashSet, then we must override equals and hashCode method

		Predefined types	like wrappers, Date, String, etc all of them override the 			equals and hashCode


	TreeSet
		implementation of SortedSet
		elements in tree set are sorted
		sorted by what?
			sorting is based on Comparable or Comparator

		if Employee class itself implements, then it should implement Comparable
		if we want to create external class, then it should implement Comparator

class Integer implements Comparable

we cannot modify this Integer class.	So we can create external comparator class 


Collections.sort
	works only for list category
	does not work for Set

Collections.sort(empList);	
-----------------------------------
Java_Mock_29_NoPrefill.docx
	requirement 4

Late comers after lunch: 12:45 pm to 13:30 pm
dhiraj chauhan		13:36:59 pm
Krishna Chandra Shekar	13:30:30 pm
--------------------------
Map
	key-value pair

how will you add to a map?
	put(key,value)			//there is no add method
	get(key)		returns value

every element in map is an Entry
Entry<Key,Value>

map.entrySet();			entries as a Set
map.keySet();			keys as a Set

Set has iterator.	Map do not have iterator.


import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class App {

	public static void main(String[] args) {
		Map<Integer, String> countryMap=new HashMap<>();
		countryMap.put(12, "Bangladesh");
		countryMap.put(7, "China");
		countryMap.put(null, "Pakistan");
		countryMap.put(9, "Srilanka");
		countryMap.put(6, "Nepal");
		countryMap.put(6, "Bhutan");
		countryMap.put(7, "Japan");
		
		
		for(Entry<Integer, String> e:countryMap.entrySet())
		{
			System.out.println(e);
		}
		
	}

}




----------------
Accept input string from user
ex:
	this is a sentence typed by me

output:
t	3
h	1
i	2
s	3
	6
a	1
e	5
n	2
c	1
y	2


solution:
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

public class App2 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String input=sc.nextLine();
		
		char[] arr = input.toCharArray();
		
		Map<Character, Integer> map=new LinkedHashMap<>();
		for(char c:arr)
		{
			Integer value = map.get(c);
			if(value==null)
			{
				value=0;
			}
			value++;
			map.put(c, value);
		}
		
		for(Entry<Character, Integer> e:map.entrySet())
			System.out.println(e);
	}

}

--------------------
Java_Mock_29_NoPrefill.docx
Requirement:1	equals method
Requirement:2	add, remove, display List<Mobile>
Requirement:4	find by name, find by display size
Requirement:5	Comparable, Comparator
Requirement:6	Year wise mobile count	as Map
-------------------------

Date dt=new Date();
dt.getYear();		//2023-1900=	123
dt.getMonth();		//8

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;

public class MainDate {

	public static void main(String[] args) throws ParseException {
		Date dt=new Date();
		String str1="24-Oct-2023";
		//how to convert String into Date?
		SimpleDateFormat sdf2=new SimpleDateFormat("dd-MMM-yyyy");
		dt=sdf2.parse(str1);
//		System.out.println(dt); 		//Wed Sep 06 15:37:37 IST 2023
//		System.out.println(dt.getMonth());
//		System.out.println(dt.getYear());
		
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy");
		String str = sdf.format(dt);
		int year=Integer.parseInt(str);
		System.out.println(year);
		
		sdf=new SimpleDateFormat("EEEE");
		System.out.println(sdf.format(dt));

		System.out.println(Arrays.toString(dt.toString().split(" ")));
	}

}

-----------------------------------

