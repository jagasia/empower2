Day 3:
SELECT

-- select round(155.454,-2) from dual;
-- select ceil(129.456) from dual;
-- select floor(123.956) from dual;

_______ function returns the largest integer lesser than or equal to the given number.
ans:	floor

floor(123.956)	=	123


________ function returns the smallest integer greater than or equal to the given number.
ans:	ceil


---------------------------------
Activity
	identify the functions used in SQL
--------------------------------
1) WHERE clause
	condition should be boolean expression that results in true or false
	for multiple conditions, you can use 	Logical operators like AND OR

	WHERE salary>9000 AND salary<15000
2) ORDER BY clause
	to sort the result in particular order(s)

select * from hr.employees
order by salary;

select * from hr.employees
order by salary desc;

select * from hr.employees
order by job_id, salary;

select * from hr.employees
order by job_id desc, salary asc;

ORDER BY clause should be the last part of a SELECT query.

------------------------
GROUP BY
	what is the need for group by?

whenever we use aggregate functions, we get 1 result per table.
	SUM
	COUNT
	MIN
	MAX
	AVG
SELECT SUM(SALARY) FROM HR.EMPLOYEES;

Result:
691416



SELECT JOB_ID, SUM(SALARY) FROM HR.EMPLOYEES
    GROUP BY JOB_ID;

Result:
JOB_ID	SUM(SALARY)
AD_VP	34000
FI_ACCOUNT	39600
PU_CLERK	13900
SH_CLERK	64300
HR_REP	6500
PU_MAN	11000
AC_MGR	12008
ST_CLERK	55700
AD_ASST	4400
IT_PROG	28800
SA_MAN	61000
AC_ACCOUNT	8300
FI_MGR	12008
ST_MAN	36400
AD_PRES	24000
MK_MAN	13000
SA_REP	250500
MK_REP	6000
PR_REP	10000

So we understand that GROUP BY produces 1 result per GROUP.



SELECT JOB_ID, SUM(SALARY) FROM HR.EMPLOYEES
    GROUP BY JOB_ID
	ORDER BY SUM(SALARY)



SELECT JOB_ID, SUM(SALARY) FROM HR.EMPLOYEES
    WHERE SUM(SALARY)>20000
    GROUP BY JOB_ID
	ORDER BY SUM(SALARY)
	
ERROR:
ORA-00934: group function is not allowed here



SELECT JOB_ID, SUM(SALARY) FROM HR.EMPLOYEES
    -- WHERE SUM(SALARY)>20000
    GROUP BY JOB_ID
    HAVING SUM(SALARY)>20000
	ORDER BY SUM(SALARY)
	

What is the difference between WHERE and HAVING?
	WHERE is used to restrict the rows
	HAVING is used to restrict the groups

-------------------
Activity:
	Identify the correct use of
	WHERE
	ORDER BY
	GROUP BY
	HAVING

1) Display alls the employee's id, first name, last name, salary where salary is between 10k and 15k
2) Display those results in the order of salary
3) Display the number of employees present in the organisation whose department number is 90
4) Display the number of employees in each department
5) Display the average salary of employees in each department
6) Display the minimum, maximum salaries of each department employees.


Komal G.D
Ramyashree R
Tejas


Gowrika T.K	
Skanda Smaran V
Rajvir Saini
Niharika
Chenna Kesava Reddy



-- Display alls the employee's id, first name, last name, salary where salary is between 10k and 15k
SELECT employee_id, first_name, last_name, salary
from hr.employees
where salary between 10000 and 15000;


-- 2) Display those results in the order of salary
SELECT employee_id, first_name, last_name, salary
from hr.employees
where salary between 10000 and 15000
order by salary;


-- 3) Display the number of employees present in the organisation whose department number is 90
select count(*)
from hr.employees
    where department_id=90;


-- 4) Display the number of employees in each department
select department_id, count(employee_id) from hr.employees
group by department_id;


-- 5) Display the average salary of employees in each department
select avg(salary) from hr.employees
group by department_id;


-- 6) Display the minimum, maximum salaries of each department employees.
select min(salary),max(salary)
from hr.employees
group by department_id;

--------------------
SET operators
	UNION
	UNION ALL
	INTERSECT
	MINUS
	DIVIDE

---------------
COALESCE
NVL
NVL2
NULLIF

COALESCE
	is a function that accepts any number of arguments.
	if the first argument is null, then it will look the next argument,
	if that next argument is null, then it will look the next argument,
	the first NOT NULL argument found, is returned by the function.

NVL
	this function, accepts 2 arguments
	if the first argument is NULL, then it will return the next argument.
	if the first argument is NOT NULL, then it will return the first argument.

select commission_pct, salary, NVL(commission_pct,.1)*salary BONUS
from hr.employees;

NVL2
	this function accepts 3 arguments
	if the first argument is NULL, then it will return the 3rd argument.
	if the first agument is NOT NULL then it will return the 2nd argument.
select commission_pct, salary, NVL2(commission_pct,.1, 2)*salary BONUS
from hr.employees;

NULLIF
	returns NULL if both arguments are same.
	reuruns the first argument if they are different.
select nullif(20,120) from dual;

---------------------------
Activity
	practise pre-defined functions in SQL
----------------------
Index
	For every primary key, UNIQUE constraints, we create, index is automatically created.
	Index enforce uniqueness.
	Index speeds up the queries.
	Index slows down DML
	Index is always sorted
	There can be many indices for a table.
	There can be only one Clustered index for a table

When we create a primary key then a clustered index is automatically created.
the physical records are always in the order specified by the clustered index.
Means, when we add a record, it not necessarily be added at the end.

Creating more indexes on a table does not provide value.
create index on a table on the given condition:
	if you search records using SELECT statement and that statement uses WHERE condition, based on a column. Then if that column is indexed, then only, the index is useful.
SELECT * FROM HR.EMPLOYEES;	--here, no condition is used. NO INDEX is useful at all.

if your search results only 2% or less of the whole number of rows, then only, index is useful

index slows DML

CREATE INDEX idx1
ON EMPLOYEES(JOB_ID);

SELECT * FROM EMPLOYEES WHERE JOB_ID='AD_VP';

create index idx2
on employees(upper(first_name));

SELECT * FROM EMPLOYEES WHERE UPPER(FIRST_NAME)='RAJA';
-------------------------
select * from all_indexes;

----------------------
VIEWS:
----------

Management asks you to retrieve all employees who celebrate work anniversary in August.
SELECT * FROM HR.EMPLOYEES
where EXTRACT(MONTH FROM HIRE_DATE)=8;
-- WHERE HIRE_DATE LIKE '%AUG%';
-- WHERE EXTRACT(MONTH FROM HIRE_DATE)='August';



CREATE VIEW vwWork
    AS
SELECT * FROM HR.EMPLOYEES
where EXTRACT(MONTH FROM HIRE_DATE)=8;

SELECT * FROM vwWork;

What is the purpose of View?
	You do not provide PRIVILEGES on tables to users.
	we can provide access to VIEWs and thereby restrict access to:
		certain columns
		certain rows
		

create or replace view vwEmp1
as
SELECT FIRST_NAME AS FNAME, SALARY*.2 AS BONUS
FROM HR.EMPLOYEES
WHERE DEPARTMENT_ID>80;


Activity:
	Understand the purpose and advantage of using VIEWS.
	What can be done in VIEW
	What cannot be done in VIEW

