Day 18: (21-Sep-2023)
-----------------------------
MVC forms validation	****
Login - Logout
Image upload and display
Spring boot Rest
Swagger
Postman

---------------------------
Validation
	checking whether data entered is correct or not

Spring forms (taglib)
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>

has a support for displaying error message.

To define validations???
	where we define the rules?	in Entity class.

1) add dependency to pom.xml
for that we need to add the following dependency:
	<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>6.0.13.Final</version>
</dependency>


2) define the rules in entity class
@Entity
@Table(name="PRODUCT")
public class Product {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	@Size(min = 5, message = "Product name must be atleast 5 characters")
	private String name;
	private Double price;

3) In controller, we need to validate while adding a new product
	@RequestMapping(value = "dml", method = RequestMethod.POST, params = "add")
	public ModelAndView addProduct(@Valid Product product, BindingResult br)
	{
		ps.addProduct(product);
		return showProductPage();
	}


I have used 
@Size
	is used for length of a string
@Min
@Max
	are used for numeric fields ranges
-------------------------------------------------------
		<form:form method="post" action="dml" modelAttribute="product">
			Id:<form:input type="number" path="id" class="form-control" /><br/>
			Name:<form:input type="text" path="name" class="form-control" />
			<form:errors style="color:red" path="name" /><br/>
			Price:<form:input type="number" path="price" class="form-control" />
			<form:errors style="color:red" path="price" />
			<br/>
			<input type="submit" name="add" value="Add" class="btn btn-info" />&nbsp;
			<input type="submit" name="update" value="Update" class="btn btn-warning" />&nbsp;
			<input type="submit" name="delete" value="Delete" class="btn btn-danger" />&nbsp;
		</form:form>

-------------------------------------------
Image upload and display
byte []

mysql:
	tinyblob
	mediumblob	
	longblob		(suitable for image files)	

in application.properties
	lets enable h2 console and mention the url

spring.h2.console.enabled=true
spring.h2.console.path=/h2


-------------------------------Image in product
1) add a property
	byte[] pic;

generate getters and setters for this
2) in product.jsp
<form method="post" action="dml">
			Id:<input type="number" name="id" class="form-control" />
			Name:<input type="text" name="name" class="form-control" />			
			Price:<input type="number" name="price" class="form-control" />			
			Pic:<input type="file" name="pic" class="form-control" /><br/>
			<input type="submit" name="add" value="Add" class="btn btn-info" />&nbsp;
			<input type="submit" name="update" value="Update" class="btn btn-warning" />&nbsp;
			<input type="submit" name="delete" value="Delete" class="btn btn-danger" />&nbsp;
		</form>
3) in controller
	@RequestMapping(method = RequestMethod.POST, value = "add1")
	@ResponseBody	
	public ModelAndView addProduct1(@RequestParam("id")Integer id,@RequestParam("name") String name,@RequestParam("price") Double price,@RequestParam("pic") MultipartFile file) throws IOException
	{
		Product product=new Product(id, name, price);
		product.setPic(file.getBytes());
		ps.addProduct(product);
		return showProductPage();
	}

4) display the image in jsp:
the byte array should be converted into Base64 String

Base64 string belongs to a jar file
apache-commons.jar

in maven, we can add the dependency
<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>2.13.0</version>
</dependency>

5) in entity class, add a getter method that converts the byte [] into Base64 string
	public String getPic1()
	{
		//convert the byte [] into Base64 String
		return Base64.encodeBase64String(pic);
	}

6) in jsp
<td>
  						<img width="100" src="data:image/jpg;base64,${p.pic1 }" />
  						</td>
