Day 18: (21-Sep-2023)
-----------------------------
MVC forms validation	****
Login - Logout
Image upload and display	****
Spring boot Rest
Swagger
Postman

---------------------------
Validation
	checking whether data entered is correct or not

Spring forms (taglib)
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form"%>

has a support for displaying error message.

To define validations???
	where we define the rules?	in Entity class.

1) add dependency to pom.xml
for that we need to add the following dependency:
	<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-validator -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-validator</artifactId>
    <version>6.0.13.Final</version>
</dependency>


2) define the rules in entity class
@Entity
@Table(name="PRODUCT")
public class Product {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	@Size(min = 5, message = "Product name must be atleast 5 characters")
	private String name;
	private Double price;

3) In controller, we need to validate while adding a new product
	@RequestMapping(value = "dml", method = RequestMethod.POST, params = "add")
	public ModelAndView addProduct(@Valid Product product, BindingResult br)
	{
		ps.addProduct(product);
		return showProductPage();
	}


I have used 
@Size
	is used for length of a string
@Min
@Max
	are used for numeric fields ranges
-------------------------------------------------------
		<form:form method="post" action="dml" modelAttribute="product">
			Id:<form:input type="number" path="id" class="form-control" /><br/>
			Name:<form:input type="text" path="name" class="form-control" />
			<form:errors style="color:red" path="name" /><br/>
			Price:<form:input type="number" path="price" class="form-control" />
			<form:errors style="color:red" path="price" />
			<br/>
			<input type="submit" name="add" value="Add" class="btn btn-info" />&nbsp;
			<input type="submit" name="update" value="Update" class="btn btn-warning" />&nbsp;
			<input type="submit" name="delete" value="Delete" class="btn btn-danger" />&nbsp;
		</form:form>

-------------------------------------------
Image upload and display
byte []

mysql:
	tinyblob
	mediumblob	
	longblob		(suitable for image files)	

in application.properties
	lets enable h2 console and mention the url

spring.h2.console.enabled=true
spring.h2.console.path=/h2


-------------------------------Image in product
1) add a property
	byte[] pic;

generate getters and setters for this
2) in product.jsp
<form method="post" action="dml">
			Id:<input type="number" name="id" class="form-control" />
			Name:<input type="text" name="name" class="form-control" />			
			Price:<input type="number" name="price" class="form-control" />			
			Pic:<input type="file" name="pic" class="form-control" /><br/>
			<input type="submit" name="add" value="Add" class="btn btn-info" />&nbsp;
			<input type="submit" name="update" value="Update" class="btn btn-warning" />&nbsp;
			<input type="submit" name="delete" value="Delete" class="btn btn-danger" />&nbsp;
		</form>
3) in controller
	@RequestMapping(method = RequestMethod.POST, value = "add1")
	@ResponseBody	
	public ModelAndView addProduct1(@RequestParam("id")Integer id,@RequestParam("name") String name,@RequestParam("price") Double price,@RequestParam("pic") MultipartFile file) throws IOException
	{
		Product product=new Product(id, name, price);
		product.setPic(file.getBytes());
		ps.addProduct(product);
		return showProductPage();
	}

4) display the image in jsp:
the byte array should be converted into Base64 String

Base64 string belongs to a jar file
apache-commons.jar

in maven, we can add the dependency
<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
<dependency>
    <groupId>commons-io</groupId>
    <artifactId>commons-io</artifactId>
    <version>2.13.0</version>
</dependency>

5) in entity class, add a getter method that converts the byte [] into Base64 string
	public String getPic1()
	{
		//convert the byte [] into Base64 String
		return Base64.encodeBase64String(pic);
	}

6) in jsp
<td>
  						<img width="100" src="data:image/jpg;base64,${p.pic1 }" />
  						</td>
------------------------------------------------
Spring boot Rest
-----------------------
	REST stands for REpresentational State Transfer

History of webservices:
--------------------------------
	2001 SOAP webservices 	Simple Object Access Protocol

1999	microsoft presented white paper at W3C on XML
	XML be the data interchange format across heterogenous applications (Interoperability)

	a data format to be used by all applications as a standard.	XML
Using xml as a format, SOAP webservices evolved in 2001

SOAP
	XML
REST
	XML
	JSON
	HTML
	TEXT

RESTful Webservices		REST API
REST principles:
--------------------------
	uniform URI
		http://localhost:5000/product


http://localhost:5000/product
	POST		adding a product
	PUT		updating a product
	DELETE		deleting a product
	GET		retrieving all products
	GET 	/{id}	retrieve one product by id
	PATCH		update few of the properties of a product


	
	Statelessness:
		every request is independent.

	Layered System:
		example, API in one server, Database in another server, authentication in another server	

	Code on Demand:
		different format based on demand. XML or JSON

-----------------------------------
Hello world in Spring Boot REST

In MVC
	we create @Controller
In REST
	we create @RestController

@RestController = @Controller + @ResponseBody

-----------------
1) create a spring boot project
2) create a rest controller
@RestController
public class MyController {
	
	@GetMapping
	public String home()
	{
		return "Welcome to my first rest api";
	}
}
-------------------------------
In our project, we will create one or more rest apis.

there are already some rest apis available in the world. 

https://jsonplaceholder.typicode.com/todos
	
In browser, address bar, if you type and enter an URL, then you are call it using GET method only

I can use POSTMAN to access other http methods like
	POST
	PUT
	DELETE
	PATCH
	GET

what is postman?
	Postman is a popular software application that is used by developers and API (Application Programming Interface) testers to simplify the process of testing APIs. It provides a user-friendly interface for making HTTP requests to APIs and inspecting the responses. Postman is commonly used during the development and testing phases of software projects to ensure that APIs are functioning correctly and to facilitate collaboration among team members.


in software centre, check is postman is present and if present, install it.


https://api.instantwebtools.net/v1/airlines
	this rest api allow us to do
		GET		all flights
		GET		find flight by id
		POST		to add a new fligh

POSTMAN
	allow us to access a rest api using any HTTP method


package com.empower.ecom.controller;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MyController {
	
	@GetMapping
	public String home()
	{
		return "Welcome to my first rest api";
	}
	
	@PostMapping
	public String add()
	{
		return "Added";
	}
	
	@PutMapping
	public String update()
	{
		return "Update";
	}
	
	@DeleteMapping
	public String delete()
	{
		return "Deleted";
	}
}

---------------------
Swagger

1) in pom.xml	add the following dependency:
<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-boot-starter</artifactId>
    <version>3.0.0</version>
</dependency>
2) in Configuration class/ Application.java, enable swagger
@EnableSwagger2
3) in application.properties:
spring.mvc.pathmatch.matching-strategy=ant-path-matcher
4) check in browser
	http://localhost:8080/swagger-ui/

-------------------------------
Activity:
Vehicle
	id		auto generated
	name
	color
	model		is a year

1) create a spring boot project	
	maven
	java
	2.7.15
	jar
	8
	dependencies:
	spring web
	spring data jpa
	h2
2) Vehicle.java		entity
3) VehicleRepository.java	repository
4) VehicleService.java		service
5) VehicleController.java	controller		rest controller
6) use swagger
Test the rest api for 	GET, POST, PUT, DELETE
--------------------------------------------------------------------