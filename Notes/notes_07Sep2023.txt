Day 9:
Comparable, Comparator

If you want to sort elements, then that element type must be comparable.
Only comparable types are sortable.

When a class implements Comparable interface and override compareTo method, then that class type is comparable. Hence it is sortable.

i) Collections.sort()		or Arrays.sort()
ii) TreeSet			only comparable elements can be added to a tree set.

All predefined types already implements Comparable

class Employee implements Comparable<Employee>
{
	public int compareTo(Employee arg)
	{
		return this.getId().compareTo(arg.getId());
	}
}

the above employee is compared by their id

if i want to sort employees based on salary,then, i need to modify the compareTo method

instead of that, we can create several external comparator classes.

public class EmployeeSalaryComparator implements Comparator<Employee>
{
	public int compare(Employee arg1, Employee arg2)
	{
		return arg1.getSalary().compareTo(arg2.getSalary());
	}
}



-------------------
class Employee implements Comparable<Employee>
{
	public int compareTo(Employee arg)
	{
		return this.getId().compareTo(arg.getId());
	}
}

public class EmployeeSalaryComparator implements Comparator<Employee>
{
	public int compare(Employee arg1, Employee arg2)
	{
		return arg1.getSalary().compareTo(arg2.getSalary());
	}
}

The difference between Comparable and Comparator.

A comparable interface is used by the Type itself.
so it is possible for a Type to have only one implementation of the Comparable.

For all other type of comparation, we need external Comparator.
Comparator, gives you the option to have mutliple possible ways of sorting.


create a comparator that sorts employees by their firstName in asc order and then by lastName in desc order and then by their salary in asc order.

if(this.firstName.equals(arg.getFirstName())
	if(this.lastName.equals(arg.getLastName())
		return this.salay.compareTo(arg.getSalary());
	else 
		return arg.getLastName().compareTo(this.lastName);
else
	return this.firstName().compareTo(arg.getFirstName());
----------------------------------------------

Java_Mock_30.docx
	Requirement #3
	Requirement #4

	
All java mock files in:
https://github.com/jagasia/javamock
--------------------------------------------------------
IO
	Input Output

Input can be obtained from 
	keyboard
	a file
	memory		(buffer)
	socket		(client)

There are many sources of Input

There are many destination of Output
	monitor		System.out
	Speaker
	Printer
	Socket		(client)
	File

java.io		package

There are many classes, interfaces present in this package.

The class names end with
	InputStream
	OutputStream
are Binary streams.
-----------------------------------
The class names end with
	Reader
	Writer
are character streams
---------------------------------

Tell me various types of files;
	pdf
	xls
	jpg
	csv
	jpg
	png
	psd
	txt
	stl
	xml
	mp4
	mp3
	mkv
	json
	doc

text file
binary file		(all other than text are binary)

-----------------------------
You want to read bytes from a file.
	FileInputStream

You want to read characters from a file.
	FileReader

You want to write characters to a file.
	FileWriter

You wan to write bytes to a file.
	FileOutputStream


ObjectOutputStream
	write objects to a stream
BufferedReader
	read characters from a memory

Node streams
	points to definite node
but for additional functionality, we use 
Filters streams
	they work on node streams

ObjectInputStream is an example for Filter stream that works on another node stream like
FileInputStream

Before jdk 1.5, when scanner was not there,
we used
	BufferedReader		to read characters
	BufferedInputStream		to read bytes


BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		String input=br.readLine();
		System.out.println(input);


BufferedInputStream bis=new BufferedInputStream(System.in);
		int i=bis.read();
		System.out.println(i);

Character input and output
Binary input and output

File f=new File("skanda.txt");

what is opening a file?
	creating an object representation of a file(which is in storage)
	storage to memory

closing a file?
	remove the object from memory
	will automatically call flush
Flush?
	reflect the changes in object (memory) to file (storage)


Demo:
	read all bytes from biriyani picture file and
	create a new file and write all those bytes to the file.

which class i should use for reading all bytes from a file
	FileInputStream


File f=new File("C:\\Users\\rjaga\\Pictures\\briyani1.jfif");
		FileInputStream fis=new FileInputStream(f);
		long len = f.length();
		System.out.println("there are "+len+" bytes in that file");
		byte data[]=new byte[(int) len];
		
		fis.read(data);
		fis.close();
		//read process is over
		
		FileOutputStream fos=new FileOutputStream(new File("komal.jfif"));
		fos.write(data);
		fos.flush();
		fos.close();
		System.out.println("Done");

----------------------
reading 1 byte at a time:
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class MainFile2 {

	public static void main(String[] args) throws IOException, InterruptedException
	{
		FileInputStream fis=new FileInputStream("C:\\\\Users\\\\rjaga\\\\Pictures\\\\briyani1.jfif");
		FileOutputStream fos=new FileOutputStream("chenna.jfif");
		int data=-1;
		while((data=fis.read())!=-1)
		{
			fos.write(data);
//			Thread.sleep(10);
			fos.flush();
		}
		System.out.println("done");
	}

}

----------------
DataInputStream		for primitive data types
ObjectInputStream		for reading objects
BufferedInputStream		for reading bytes

OutputStreams vice versa
------------------
DataInputStream

import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class MainDataOutputStream {

	public static void main(String[] args) throws IOException {
		DataOutputStream dos=new DataOutputStream(new FileOutputStream("dadapeer.dat"));
		dos.writeInt(123);
		dos.writeFloat(12.2f);
		dos.writeChars("Dadapeer");
		dos.flush();
		dos.close();

	}

}







import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class MainDataInputStream {

	public static void main(String[] args) throws IOException {
		DataInputStream dis=new DataInputStream(new FileInputStream("dadapeer.dat"));
		int i=dis.readInt();
		float f=dis.readFloat();
		String str=dis.readLine();
		System.out.println(i);
		System.out.println(f);
		System.out.println(str);
		
	}

}



-------------
ObjectOutputStream
ObjectInputStream


public class Employee implements Serializable

what is Serializable?
	Serializable is a marker interface.
	What is a marker interface?
		An interface that do not have any abstract method is a marker interface.

Employee employee=new Employee();
Object o=emp;		//auto casting		widening is automatic
emp=(Employee)o;		//explicit casting		narrowing is not automatic


transient
	transient members does not participate in serializable
	transient means, non persistent

--------------------------------------------------
Late after Lunch:
Dhiraj
------------------------
Regex:
	Regular Expression
		patterns
		validations
		searching
		
What is the need for regular expression?
	to validate if the data entred by the user is valid as per given pattern.
	to extract the portions of the text whichever matches the given pattern.

detail.split("\\.");

 1) check if the input string matches the given pattern or not.
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		//An employee id must be like E001
		Scanner sc=new Scanner(System.in);
		String input=sc.next();
		if(input.matches("E\\d{3}"))
			System.out.println("Valid");
		else
			System.out.println("Invalid");
	}

}


------------------
What are the symbols used in regular expressions?
pattern multiplicity

\d		digit		0-9
\D		non digit

E{1}		We can mention as 		E 		only
E{1,1}	
E{1,3}		minimum 1 time, maximum 3 times
E{1,}		minimum 1 time, maximum unbounded
E{,3}		maximum 3 times
.		means anything
|		OR operator
we can mention the multiplicity using 		{min,max}
or
we can also use
*	0 or more
+	1 or more
?	0 or 1			Optional

E\\d+		E followed by 1 or more digits

for digits, we can also use
[0-9]+		1 or more digit(s)

[	]	can be used for range or IN
[aeiou]		means, any of these can be present
[a-z]		any lower case character
[A-Z]		any upper case character
[A-Za-z0-9]	any upper/lower case character or digit can be present
(	)	can be used to group
------------------------------------
Extract the numbers present in the input string

input:
please contact this number 9898989898 and if it is not reachable, contact this alternative number 9393939393.


import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main2 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String input=sc.nextLine();
		Pattern p=Pattern.compile("\\d{10}");
		Matcher m = p.matcher(input);
		while(m.find())
		{
			System.out.println(m.group());
		}
	}

}


-------------------------
Task:
1) Accept an email id from the user. Validate if it is a valid email id.
Rules for an email id:
	test cases
		1. 	rama.krishna12@gmail.com		(valid)
		2.	rajvir.saini@yahoo.co.in		(valid)
		3.	jagindia@yahoo			(invalid)
		4.	r.jag.india@yahoo.com			(invalid)

import java.util.Scanner;

public class MainEmail {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		String email=sc.nextLine();
		//check if this email is valid
		String pattern="([A-Za-z0-9])+([.][A-Za-z0-9]+){0,1}@[A-Za-z0-9]+[.](([a-zA-Z]{3})|([a-zA-Z]{2}[.][a-zA-Z]{2}))";
		System.out.println(email.matches(pattern)?"Valid":"Invalid");
	}

}


2) Find the email ids present in the input string.


Challenge:
https://github.com/jagasia/javamock
Java_Mock_29_NoPrefill.docx
	Requirement 3
		Scanner sc=new Scanner(System.in);
		String input=sc.nextLine();
		String pattern="#[A-Z]{2,3}( [0-9]{2})? [A-Z0-9]{2,6}[-][0-9]{2,4}";
		if(input.matches(pattern))
			System.out.println("Valid");
		else
			System.out.println("Invalid");

Java_Mock_30.docx
	Requirement 2

Scanner sc=new Scanner(System.in);
		String input=sc.nextLine();
		String pattern="[+]91[1-9][0-9]{9}";
		System.out.println(input.matches(pattern)?"Valid":"Invalid");

-------------------------
Thread
--------------
	What is the difference between Process and Thread?
	Process is the running instance of a program.
		a process can contain one or more threads.
		thread is a part of process.

	CPU allocates resources for each process
		(resource	=	CPU time and Memory)
	Thread share the resources of a process.

If a process contains only 1 thread
	CPU	3 GHz	=	for one second, it goes 3 * 1024*1024*1024 times
CPU comes to our process.	Our process is waiting for user input. CPU spends that time and move to next process.
	CPU utilization is 0%

If our process has 2 threads, 	
	CPU utilization is 50%

	3 threads		66%

	4 threads		75%

		
Multi threaded process contains more than 1 thread.
	main thread + child threads
