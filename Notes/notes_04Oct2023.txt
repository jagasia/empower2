Day 26: (04-Oct-2023)
------------------------------


npm config set strict-ssl false

npm cache verify
npm cache clean

npm i -g react
npm i -g react-dom
npm i -g react-scripts
npm i -g cra-templates
---------------------------------------------------------------------------------
CSS
	Cascading StyleSheet

what is the need for a stylesheet?
	doing coloring
	aesthetics
	style
	add boxes (layout)
	proper format, organized design
	
	why can't we do this in HTML itself?

	<font color="red">		</font>	

When we use stylesheet, across multiple html files, it is very easy to apply the changes to all these pages, just by updating or replacing the stylesheet.

Provides the separation of roles of two profiles
	html developer
	css developer

How to use CSS in a HTML file?
	inline
	internal
	external

inline
	style attribute of a html element
	ex:
    <p style="color: red;">This is a paragraph</p>
    <p>This is another paragraph</p>
    <p>This is third para</p>

internal
	style element is used

    <style>
        p{
            color: blue;
        }
    </style>

external
	we need to create a separate file with extension	css
---------------------------------------------------
How styles are applied?
	styles are applied by		selectors
		element
		element:type
		id			#
		class			.
		universal selector		*
p
{
}

#p1

.header


-------------------
Activity:

Selectors
Box model
Background
Borders

------------------------------------------------------

if komal has create a very big css file.
Komal gives this css file to Nitin.
How Nitin will use it? in his html file?
	<link rel="stylesheet" href="komal.css">

Activity:
create a html file, 
	5 textboxes

whenever cursor comes into a text box, its background color should become yellow



    <style>
        input[type="text"]:focus
        {
            background-color: yellow;
        }

    </style>
-----------------------------------------------------
Javascript
--------------
	what is javascript?
		is a client side scripting language.

	servlet, jsp, php are example for server side scripts. They run at server and the output is sent to the browser.
	
	javascript, vbscript are example for client side scripts. They run at browser

	User Experience is good in client side scripts

we can have external javascript file
	myscript.js

we can refer in html file
	<script src="myscript.js">
		/*	do not write anything here	*/
	</script>



https://www.w3schools.com/js


var arr=[22,10,70,80,65,96,39];
for(var i=0;i<arr.length;i++)
{
    console.log(arr[i]);
}

for(var x in arr)	then x will be index

for(var x of arr)
{
    console.log(x);
}




while(true)
{
    console.log("OK");
    i++;
    if(i>arr.length)
        break;
}




var arr=[22,10,70,80,65,96,39];
var i=0;
do
{
    console.log(arr[i]);
    i++;
    
}while(i<arr.length);



function fn1()
{
    console.log("Fn1 function is called");
}

function sum(i,j)
{
    return i+j;
}

fn1();
fn1();
fn1();
fn1();
console.log(sum(2,3)+" is the answer");



Javascript last version = ES6

Activity:
Write javascript programs to understand
	operators
	constructs
		if
		switch
		while
		do while
		for
		for each
	arrays

Run the js file using 	
	node one.js
--------------------------
How to use javascript in html?
	for event handling?
	
click
dblclick
focus
blur
keyup
keydown
mouseup
mousedown
change


DOM	Document Object Model
	represents the html or any document as an object
	we will be able to access the elements and attributes using dom

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>
        function fnLogin()
        {
            var uid=document.getElementById("txtUsername").value;
            var pwd=document.getElementById("txtPassword").value;
            if(uid==pwd)
                window.alert("Login failed");
            else
                alert("Login successful");
        }
    </script>
</head>
<body>
    User Name: <input type="text" name="" id="txtUsername"><br>
    Password: <input type="password" name="" id="txtPassword"><br>
    <input type="button" value="Login" onclick="fnLogin()">
</body>
</html>

Activity:

Write a javascript function to add 2 numbers.
Enter the numbers in 2 text boxes.
Bind the click event of the button to the function and run the program.

no1 =2
no2 =3
sum =5


1) The output should be displayed below the button.
2) The output should be displayed as and when the number is changed
	no need to click the button

put this line in vs code cmd prompt:

Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
----------------------------------------
Data types
Dates
Objects

var i=20;		//int
var j=2.5;		//float


// Numbers:
let length = 16;
let weight = 7.5;

// Strings:
let color = "Yellow";
let lastName = "Johnson";

// Booleans
let x = true;
let y = false;

// Object:
const person = {firstName:"John", lastName:"Doe"};

// Array object:
const cars = ["Saab", "Volvo", "BMW"];

// Date object:
const date = new Date("2022-03-25");

----------------
Date
	2023-10-04

	04/10/2023


SimpleDateFormat
	by default, is Lenient
	set it to nonLenient
		sdf.setLenient(false);
-------------------------
Date in java and javascript is actually a long number
for every date, there is a numeric representation in long datatypes

in java:
Date dt=new Date();
long value=dt.getTime();	

in javascript:
var dt=new Date();


if the long value is 0, then date is 		01-Jan-1971

Activity:
in html page, accept the date of joining using 
	input:date

Print the output below the button:
	You joined on 14th August 2023.!


--------------------------------------
Objects
	convert a String into object and vice versa
	String means, JSON string



the below code converts a JSON string into an object:
var str='{"id":"100","firstName":"Steven","lastName":"King","salary":"24000"}';
var employee=JSON.parse(str);
console.log(employee);

the below code converts object into JSON string:

Activity:
accept inputs from the user in form and convert that into an object.

var emp={id:0,name:''};
emp.id=200;
emp.name='Raja';
console.log(emp)
-----------------------------------------------------------
Create a login page.
Username:
Password:
Remember me: (check box)
<<Login Button>>
if you tick remember me and click login button
next time when you open this page, it should show username automatically (password also, though it is masked)

Hint:
	how to remember?
	store the details in localStorage
localStorage
	setItem(key,value)
	getItem(key)		returns the value


Another checkbox	"Show Password"	to make the password visible / not



<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script>


        function fnLogin()
        {
            //check if Remember me check box is tick or not
            var x=document.getElementById("chkRememberMe");
            var uid=document.getElementById("txtUsername").value;
            var pwd=document.getElementById("txtPassword").value;
            // console.log(x.checked);
            if(x.checked)
            {
                localStorage.setItem("username",uid);
                localStorage.setItem("password",pwd);
                alert("Stored");
            }
        }

        function fn1()
        {
            //check if localStorage has username and password
            var uid=localStorage.getItem("username");
            if(uid!=null)
            {
                document.getElementById("txtUsername").value=uid;
            }
            var pwd=localStorage.getItem("password");
            if(pwd!=null)
            {
                document.getElementById("txtPassword").value=pwd;
            }

        }

        function fnShow()
        {
            var show=document.getElementById("chkShowPassword");
            if(show.checked)
            {
                //show
                var txt=document.getElementById("txtPassword");
                txt.setAttribute("type","text");
            }else{
                //hide
                var txt=document.getElementById("txtPassword");
                txt.setAttribute("type","password");
            }
        }
    </script>
</head>
<body onload="fn1()">
    User Name: <input type="text" name="" id="txtUsername"><br>
    Password: <input type="password" name="" id="txtPassword"><br>
    <label for="chkRememberMe">Remember me:</label> <input type="checkbox" name="" id="chkRememberMe">
    <label for="chkShowPassword">Show Password:</label> <input type="checkbox" name="" id="chkShowPassword" onchange="fnShow()"><br>
    <input type="button" value="Login" onclick="fnLogin()">
</body>
</html>
---------------------------------------------------------------------
Project:
1) Abstract
	paragraph		1 - 3 paragraphs
2) Entity classes
	properties		(naming conventions to be followed)

	every entity class primary key as	ideally "id"
		username
		email
		etc can also be primary key		
3) relationship annotations
	
h2 database	(file system. not in-memory)

4) Swagger to test the rest apis

In java naming convention:

@Entity
@Table(name="USERS")		//USER is a keyword in database
public class User
{		
	@Id
	private Integer id;	
	private String firstName;	//in db, it will become FIRST_NAME	
	private String lastName;
}


Class name:		PascalCase
variables and methods:	camelCase

--------------------------------
Javascript Fetch API
---------------------------
fetch(url)
.then(x=>x.data)
.then(y=>document.getElementById("div").innerHTML=y);

