Day 4:
PL/SQL Basics, Cursors, Procedures, Functions, Triggers
------------------------------
1) Anonymous programs
	no name
	not stored in the database	(tables, view, etc are stored in the database)

2) Named programs (FUNCTIONS, PROCEDURES, TRIGGERS)

---------------------------------------------
All these programs, should have
	BEGIN
	END


DECLARE				--this block is optional	
EXCEPTION			--this block is optional

hello world program in PL/SQL:
----------------------------------------------
BEGIN
    DBMS_OUTPUT.PUT_LINE('Hello world');
END;


in sql plus:, the output is normally set OFF. 
set serveroutput on;

Connected to:
Oracle Database 19c Enterprise Edition Release 19.0.0.0.0 - Production
Version 19.3.0.0.0

SQL> BEGIN
  2  DBMS_OUTPUT.PUT_LINE('Hello world');
  3  END;
  4  /

PL/SQL procedure successfully completed.

SQL> set serveroutput on
SQL> BEGIN
  2  DBMS_OUTPUT.PUT_LINE('Hello world');
  3  END;
  4  /
Hello world

PL/SQL procedure successfully completed.

CREATE TABLE EMP
(
	EMPID INT
);

int empId;	// this is c language
empId int;	--	this is oracle

DECLARE
    X INT;
	Y CHAR(5);
BEGIN
    DBMS_OUTPUT.PUT_LINE('Hello world');
END;

----------------------
DECLARE
    X INT;
	Y CHAR(5);
BEGIN
    X:=20;		--to assign 20 to the variable X
	Y:='Raja';	
    DBMS_OUTPUT.PUT_LINE('Hello world');
END;

-------------------------
DECLARE
    X INT;
	Y VARCHAR2(5);
BEGIN
    X:=20;		--to assign 20 to the variable X
	Y:='Raja';	
    DBMS_OUTPUT.PUT_LINE('Hello '||Y||'. Your age is '||X);
END;

--------------------------------
BEGIN
	SELECT SALARY INTO x FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=100;
END;



a) No output
b) It will print the salary of employee whose ID is 100
c) Error		--Because SELECT does not have INTO clause. So error
d) None of the above


------------------------
DECLARE
    X INT;
BEGIN
    SELECT SALARY INTO X FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=100;
END;

--No output

------------------------------
DECLARE
    X INT;
BEGIN
    SELECT SALARY INTO X FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=100;
	DBMS_OUTPUT.PUT_LINE(X);
END;

the output is 24000

-------------------
When we do not want to create a variable of specific type. Because,  it is possible that the employees table salary column data type may change later. Whenever change happens, our program need to be altered.

so better declare the variable of specific table.column % type

DECLARE
    SAL HR.EMPLOYEES.SALARY%TYPE;
BEGIN
    SELECT SALARY INTO SAL FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=100;
	DBMS_OUTPUT.PUT_LINE(SAL);
END;

--------------------------------------------
When you want to retrieve entire row of a table and store it in a variable of row type.

DECLARE
    X HR.EMPLOYEES%ROWTYPE;
BEGIN
    SELECT * INTO X FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=101;
	DBMS_OUTPUT.PUT_LINE(X.FIRST_NAME||' earns '||X.SALARY);
END;


------------------------------------------
DECLARE
    X HR.EMPLOYEES%ROWTYPE;
BEGIN
    SELECT * INTO X FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=103;
	IF X.SALARY>15000 THEN
    	DBMS_OUTPUT.PUT_LINE(X.FIRST_NAME||' earns more than 15k');
	ELSE
        DBMS_OUTPUT.PUT_LINE(X.FIRST_NAME||' earns Less salary. Actually he earns '||X.SALARY);
    END IF;
	
END;
------------------------------------------------
DECLARE
    X HR.EMPLOYEES%ROWTYPE;
BEGIN
    SELECT * INTO X FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=102;
	IF X.SALARY>15000 THEN
    	DBMS_OUTPUT.PUT_LINE(X.FIRST_NAME||' earns more than 15k');
	ELSIF X.SALARY>10000 THEN
        DBMS_OUTPUT.PUT_LINE(X.FIRST_NAME||' earns between 10001 and 15k ');
	ELSE
        DBMS_OUTPUT.PUT_LINE(X.FIRST_NAME||' earns Less salary. Actually he earns '||X.SALARY);
    END IF;
	
END;

----------------------------
Activity:
	Create a plsql program and declare variables of
	scalar type		(single value)		INT	char
	%TYPE
	%ROWTYPE

	Use IF, ELSIF, ELSE and observe.

Challenge:
	Find the salary of Employee whose id is 110.
	Find the salary of Employee whose id is 120.
	Display whose salary is higher.

DECLARE
    SAL1 HR.EMPLOYEES.SALARY%TYPE;
	SAL2 HR.EMPLOYEES.SALARY%TYPE;
BEGIN
    SELECT SALARY INTO SAL1 FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=110;
	SELECT SALARY INTO SAL2 FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=120;
	IF SAL1>SAL2 THEN
    	DBMS_OUTPUT.PUT_LINE('Employee 110 earns more');
	ELSE
        DBMS_OUTPUT.PUT_LINE('Employee 120 earns more');
    END IF;	
END;

---------------------------
PLSQL CASE STATEMENT:
-------------------------------------
DECLARE
    JID HR.EMPLOYEES.JOB_ID%TYPE;
BEGIN
    SELECT JOB_ID INTO JID FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=200;
	CASE JID
        WHEN 'AC_ACCOUNT' THEN DBMS_OUTPUT.PUT_LINE('Accountant');
		WHEN 'AC_MGR' THEN DBMS_OUTPUT.PUT_LINE('Account Manager');
		WHEN 'AD_ASST' THEN DBMS_OUTPUT.PUT_LINE('Admin Assistant');
		ELSE
            DBMS_OUTPUT.PUT_LINE('Employee');
    END CASE;
END;

---------------------

IN SQL:
----------
select employee_id, job_id, case job_id 
    when 'AC_ACCOUNT' then 'Accountant' 
    when 'AC_MGR' then 'A/c Manager'
    when 'ADD_ASST' then 'Admin Assistant'
    else 'Employee'
    end
from hr.employees;

-------------------------------
Basic loop

DECLARE
    X INT:=1;
BEGIN
    LOOP
    	DBMS_OUTPUT.PUT_LINE(X);
		X:=X+1;
		EXIT WHEN X>10;
    END LOOP;
END;

------------------------
DECLARE
    X INT:=100;
	FNAME VARCHAR2(50);
BEGIN
    LOOP
    	SELECT FIRST_NAME INTO FNAME 
    	FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=X;
    	DBMS_OUTPUT.PUT_LINE(X||' '||FNAME);
		X:=X+1;
		EXIT WHEN X>206;
    END LOOP;
END;






When SELECT statement returns 0 rows:
ORA-01403: no data found ORA-06512: at line 6

When SELECT statement returns more than 1 row:
ORA-01422: exact fetch returns more than requested number of rows ORA-06512: at line 6




DECLARE
    X INT:=100;
	FNAME VARCHAR2(50);
BEGIN
    LOOP
    	SELECT FIRST_NAME INTO FNAME 
    	FROM HR.EMPLOYEES;
    	DBMS_OUTPUT.PUT_LINE(X||' '||FNAME);
		X:=X+1;
		EXIT WHEN X>207;
    END LOOP;
EXCEPTION
    	WHEN TOO_MANY_ROWS THEN
    		DBMS_OUTPUT.PUT_LINE('Jag: There were more than 1 rows');
END;

------------------
hANDLE both exceptions:

DECLARE
    X INT:=100;
	FNAME VARCHAR2(50);
BEGIN
    LOOP
    	SELECT FIRST_NAME INTO FNAME 
    	FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=207;
    	DBMS_OUTPUT.PUT_LINE(X||' '||FNAME);
		X:=X+1;
		EXIT WHEN X>207;
    END LOOP;
EXCEPTION
    	WHEN TOO_MANY_ROWS THEN
    		DBMS_OUTPUT.PUT_LINE('Jag: There were more than 1 rows');
	WHEN NO_DATA_FOUND THEN
	            DBMS_OUTPUT.PUT_LINE('Jag: There is no row found');
END;


----------------------------------
while loop:

DECLARE
    X INT:=100;
	FNAME VARCHAR2(50);
BEGIN
    WHILE X<=206
    LOOP
    	SELECT FIRST_NAME INTO FNAME 
    	FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=X;
    	DBMS_OUTPUT.PUT_LINE(X||' '||FNAME);
		X:=X+1;
		-- EXIT WHEN X>206;
    END LOOP;
EXCEPTION
    	WHEN TOO_MANY_ROWS THEN
    		DBMS_OUTPUT.PUT_LINE('Jag: There were more than 1 rows');
		WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Jag: There is no row found');
END;

---------------
For loop:

DECLARE
    X INT:=100;
	FNAME VARCHAR2(50);
BEGIN
    FOR X IN 100 .. 206
    LOOP
    	SELECT FIRST_NAME INTO FNAME 
    	FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=X;
    	DBMS_OUTPUT.PUT_LINE(X||' '||FNAME);
		-- X:=X+1;
		-- EXIT WHEN X>206;
    END LOOP;
EXCEPTION
    	WHEN TOO_MANY_ROWS THEN
    		DBMS_OUTPUT.PUT_LINE('Jag: There were more than 1 rows');
		WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Jag: There is no row found');
END;

---------------------------------------------------
Cursors:
---------------
implicit cursors are created automatically whenever we do DML	(SQL)
User defined cursor


Cursor attributes
%ISOPEN	- Returns TRUE if the cursor is open, FALSE if the cursor is closed.
%FOUND	- Returns INVALID_CURSOR if cursor is declared, but not open; or if cursor has been closed.
- Returns NULL if cursor is open, but fetch has not been executed.

- Returns TRUE if a successful fetch has been executed.

- Returns FALSE if no row was returned.

%NOTFOUND	- Returns INVALID_CURSOR if cursor is declared, but not open; or if cursor has been closed.
- Return NULL if cursor is open, but fetch has not been executed.

- Returns FALSE if a successful fetch has been executed.

- Returns TRUE if no row was returned.

%ROWCOUNT	- Returns INVALID_CURSOR if cursor is declared, but not open; or if cursor has been closed.
- Returns the number of rows fetched.

- The ROWCOUNT attribute doesn't give the real row count until you have iterated through the entire cursor. In other words, you shouldn't rely on this attribute to tell you how many rows are in a cursor after it is opened.

-----------------------
How we can create our own cursor.

1) DEFINE CURSOR
2) OPEN CURSOR
3) FETCH A ROW FROM CURSOR
4) CLOSE CURSOR
------------------------------
DECLARE
	X HR.EMPLOYEES%ROWTYPE;
	CURSOR cur1 IS SELECT * FROM HR.EMPLOYEES;	--DEFINE CURSOR
BEGIN
    OPEN cur1;				--OPEN CURSOR
	FETCH cur1 INTO X;		--FETCH A ROW FROM CURSOR INTO A VARIABLE
	WHILE cur1%FOUND		
	LOOP
		DBMS_OUTPUT.PUT_LINE(X.EMPLOYEE_ID ||' '||X.SALARY);
		FETCH cur1 INTO X;
		-- EXIT WHEN cur1%NOTFOUND;
	END LOOP;
	CLOSE cur1;    			--CLOSE CURSOR
END;
-------------------
Challenge:
	Use cursor to display all the employee id, salary where the salary is > the average salary.

Hint:
	find the average salary and store it in a variable.


DECLARE
	AVGSAL INT;
	CURSOR cur1 IS SELECT * FROM HR.EMPLOYEES;
	EMPREC HR.EMPLOYEES%ROWTYPE;
BEGIN
    SELECT AVG(SALARY) INTO AVGSAL FROM HR.EMPLOYEES;
	-- DBMS_OUTPUT.PUT_LINE(AVGSAL);
    OPEN cur1;
	FETCH cur1 INTO EMPREC;
	WHILE cur1%FOUND 
    LOOP
        IF EMPREC.SALARY>AVGSAL THEN
        	DBMS_OUTPUT.PUT_LINE(EMPREC.EMPLOYEE_ID||' '||EMPREC.SALARY);
        END IF;
	FETCH cur1 INTO EMPREC;
    END LOOP;
	CLOSE cur1;
END;
---------------
Cursor For Loop
-------------------
DECLARE
	AVGSAL INT;
	CURSOR cur1 IS SELECT * FROM HR.EMPLOYEES;
	-- EMPREC HR.EMPLOYEES%ROWTYPE;
BEGIN
    SELECT AVG(SALARY) INTO AVGSAL FROM HR.EMPLOYEES;
	-- DBMS_OUTPUT.PUT_LINE(AVGSAL);
    -- OPEN cur1;
	-- FETCH cur1 INTO EMPREC;
	-- WHILE cur1%FOUND 
	FOR EMPREC IN cur1
    LOOP
        IF EMPREC.SALARY>AVGSAL THEN
        	DBMS_OUTPUT.PUT_LINE(EMPREC.EMPLOYEE_ID||' '||EMPREC.SALARY);
        END IF;
	-- FETCH cur1 INTO EMPREC;
    END LOOP;
	-- CLOSE cur1;
END;


-------------------
DECLARE
	AVGSAL INT;
	CURSOR cur1 IS SELECT * FROM HR.EMPLOYEES;
BEGIN
    SELECT AVG(SALARY) INTO AVGSAL FROM HR.EMPLOYEES;
FOR EMPREC IN cur1
    LOOP
        IF EMPREC.SALARY>AVGSAL THEN
        	DBMS_OUTPUT.PUT_LINE(EMPREC.EMPLOYEE_ID||' '||EMPREC.SALARY);
        END IF;
    END LOOP;
END;
-------------------------
PROCEDURE vs FUNCTION
	
	PROCEDURES in plsql are VOID FUNCTIONS
	means, it does not return a value.

DBMS_OUTPUT.PUT_LINE('Hello world');	--this PUT_LINE is a procedure.
SUM		is a function
		it returns a value

when i call a procedure, it will do something.
when i call a function, it will do something and return a value.

Procedure can return 0 or more values.


scanf("%d",&marks);		// marks is an OUT parameter
print(marks);		//marks is an IN parameter

proc1(x,y,z);		it is possible to have x as INPUT and y, z as OUTPUT

sqr(x,y);			x is input and y is output	


PROCEDURES:
------------------------
Procedure is a plsql named program that is stored in the database as a database object.

CREATE PROCEDURE PRC1
AS
    --this area is used as declare block
BEGIN
 dbms_output.put_line('hello this is procedure prc1');   
END;

Procedure created.

----------------
To call this procedure, we can call it from
	1) anonymous plsql program
	2) another procedure
	3) a function

BEGIN
    PRC1;
END;

Statement processed.
hello this is procedure prc1

Procedures with IN paramters.
---------------------------------------------
CREATE OR REPLACE PROCEDURE PRC1
AS
    X HR.EMPLOYEES.JOB_ID%TYPE;
BEGIN
    SELECT JOB_ID INTO X FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=102;
	DBMS_OUTPUT.PUT_LINE(X);
END;

---------------------------
Everytime, i want a different employee id, i need to change the procedure. It is not good idea.
So the procedure PRC1 shall have a parameter.

CREATE OR REPLACE PROCEDURE PRC1(EID HR.EMPLOYEES.EMPLOYEE_ID%TYPE)
AS
    X HR.EMPLOYEES.JOB_ID%TYPE;
BEGIN
    SELECT JOB_ID INTO X FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=EID;
	DBMS_OUTPUT.PUT_LINE(X);
END;



begin
    	prc1(102);
end;

-------------------
CREATE OR REPLACE PROCEDURE PRC1(EID HR.EMPLOYEES.EMPLOYEE_ID%TYPE)
AS
    X HR.EMPLOYEES.JOB_ID%TYPE;
BEGIN
    SELECT JOB_ID INTO X FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=EID;
	DBMS_OUTPUT.PUT_LINE(X);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    	DBMS_OUTPUT.PUT_LINE('Please check the Employee Id.');
END;

BEGIN
    PRC1(300);
END;


Statement processed.
Please check the Employee Id.

------------------
Procedure with OUT parameter

CREATE OR REPLACE PROCEDURE PRC1(EID IN HR.EMPLOYEES.EMPLOYEE_ID%TYPE, JID OUT HR.EMPLOYEES.JOB_ID%TYPE)
AS
BEGIN
    SELECT JOB_ID INTO JID FROM HR.EMPLOYEES WHERE EMPLOYEE_ID=EID;
END;


declare
    JID hr.employees.job_id%type;
begin
    PRC1(102,JID);
	dbms_output.put_line(jid);
end;

-----------------------------
Task:
	Create a procedure prc2 that will accept an INT argument and returns its
	square, cub as output parameters.