Day 2:



List of participants who have not receives email from amazon workspace:
Gowrika T.K
Komal G.D
Skanda Smaran V
Rajvir Saini
Ramyashree R
Niharika
Tejas
Chenna Kesava Reddy
---------------------------------
Pending:
	constraints	at column level, table level
	adding constraints to the columns while 
	creating table, 
	alter table, 

	drop constraints

constraints
	restrictions
	conditions that must pass
	limit
	boundary
	rules that must comply
These constraints are used to enfore data integrity.

are applied to columns of a table

PRIMARY KEY
FOREIGN KEY
CANDIDATE KEY
ALTERNATE KEY
SUPER KEY
COMPOSITE KEY
UNIQUE CONSTRAINT
NOT NULL CONSTRAINT
CHECK CONSTRAINT

These constraints are used to enfore data integrity.
what is data integrity?
	correctness of the data
types of integrity:
	Entity integrity
	Domain integrity
	Referential integrity
	User defined data integrity

What is Entity integrity?	(Primary key)		row level
	ensures that we would be able to identify any record (row) in a table uniquely using one or more column(s).	These columns are primary key column(s).

What is Domain integrity?	column level
	Data in a column must follow the domain rule.
	we can implement domain integrity using 
		CHECK constraint
		
What is Referential integrity?
	The data in a table will be verified against the data in another table.
	The foreign key of a table is verified against the primary key of another table.	

1 Steven 	King	1231	(1231 is an invalid department id. So it is not allowed here)
	
	
Foreign key
	allows NULL
	allows Duplicate
	can be created that references a column which is UNIQUE and NOT NULL
	can be composite, when the primary key it references is composite.

	supports the following response to DELETE and UPDATE of primary key table records
		CASCADE
		RESTRICT		(by default)
		SET NULL		(NULLIFY)	

Primary key is in MASTER table
Foreign key is in DETAILS table 		(also called as TRANSACTION table)

USER_MASTER		(has no foreign keys)
SALES_DETAILS		(has foreign keys)

What is User Defined Data integrity?
	Any rules enforced other than the above integrity, are user defined.
	we can implement them using Triggers, User defined types

Practical:

1) PRIMARY KEY
	does not allow NULL
	does not allow DUPLICATES
	can be COMPOSITE
	can be defined even after the table is created already.

CREATE TABLE TICKETS
(
  id int,
	seatno VARCHAR2(100),
    theatreName VARCHAR2(100)
);
	
INSERT INTO TICKETS VALUES(1, 'A1','PVR Soul Spirit Mall');
INSERT INTO TICKETS VALUES(1, 'A1','PVR Soul Spirit Mall');

ALTER TABLE TICKETS ADD CONSTRAINT PKTICKETS1 PRIMARY KEY (ID);
--Error
ORA-02437: cannot validate (SQL_NUEVXSBXIDXBAASYYMEIWVBCG.PKTICKETS1) - primary key violated 


DELETE FROM TICKETS;

2 row(s) deleted.

INSERT INTO TICKETS VALUES(1, 'A1','PVR Soul Spirit Mall');
1 row(s) inserted.

INSERT INTO TICKETS VALUES(2, 'E11','INOX Nexus Forum Mall');
1 row(s) inserted.


select * from tickets;

Result Set 2
ID	SEATNO	THEATRENAME
1	A1	PVR Soul Spirit Mall
2	E11	INOX Nexus Forum Mall
Download CSV
2 rows selected.



ALTER TABLE TICKETS ADD CONSTRAINT PKTICKETS1 PRIMARY KEY (ID);
Table altered.

Activity:
1) Create a table and define primary key for a column at column level
CREATE TABLE MOVIE
(
    ID INT PRIMARY KEY,
    NAME VARCHAR2(20)
);
2) Create a table and define primary key for a column at table level
CREATE TABLE MOVIE
(
    ID INT,
    NAME VARCHAR2(20),
    PRIMARY KEY(ID)
);
3) Create a table without primary key and ALTER the table and add constraint with constraint name

CREATE TABLE MOVIE
(
    ID INT,
    NAME VARCHAR2(20)
);
ALTER TABLE MOVIE ADD PRIMARY KEY(ID);
ALTER TABLE MOVIE ADD CONSTRAINT PK1 PRIMARY KEY(ID);

4) Remove that constraint 	(problem: we dont know the constraint name.  Find the constraint name from dictionary. 	SELECT * FROM USER_CONSTRAINTS;
ALTER TABLE MOVIE DROP CONSTRAINT SYS_C00129973268;

------------------------------------
FOREIGN KEY
	
example:
	Ticket table should contain a column "movie_id" that references "id" of "movie" table

If you already have movie, ticket tables, drop them.

Create both tables and implement primary and foreign keys accordingly.



TABLE MOVIEResult Set 7
Column	Null?	Type
ID	 - 	NUMBER
NAME	 - 	VARCHAR2(20)



-- alter table movie add constraint pkm1 primary key(id);
create table ticket
(
    id int primary key,
    seat_no char(5),
    movie_id int references movie(id)
);


insert into movie values(1, 'Jailer');
insert into movie values(2, 'Kantara');

insert into ticket values(1,'A12',11);
ORA-02291: integrity constraint (SQL_NUEVXSBXIDXBAASYYMEIWVBCG.SYS_C00129975953) violated - parent key not found ORA-06512: at "SYS.DBMS_SQL", line 1721

ERROR is because, 11 is invalid movie id.

insert into ticket values(1,'A12',2);
1 row(s) inserted.




create table ticket
(
    id int primary key,
    seat_no char(5),
    movie_id int constraint fkm1 foreign key references movie(id)
);


-- drop table ticket;
create table ticket
(
    id int primary key,
    seat_no char(5),
    movie_id int,
    constraint fkm1 foreign key(movie_id) references movie(id)
);


-------------------
Activity:
	NOT NULL
	UNIQUE
	CHECK


CREATE TABLE SHOWS
(
    ID int UNIQUE NOT NULL
    
);



DROP TABLE SHOWS;



CREATE TABLE SHOWS
(
    ID int UNIQUE NOT NULL,
    CAPACITY int,
    CHECK(CAPACITY>0)
    
);

INSERT INTO SHOWS VALUES(1,-1);
ORA-02290: check constraint (SQL_NUEVXSBXIDXBAASYYMEIWVBCG.SYS_C00129976849) violated ORA-06512: at "SYS.DBMS_SQL", line 1721


INSERT INTO SHOWS VALUES(1,1);
1 row(s) inserted.

-------------------------------------------
DML	-	Data Manipulation Language

INSERT
UPDATE
DELETE

Activity:
	Insert a row into the table with values in the correct order
	Insert a row into the table with values in different order, but mentioned in the statement.
	Insert a row into the table with DEFAULT values
	Insert multiple rows to a table using single INSERT statement
	Insert into a table using SELECT statement that retrieves all rows from another table
	Insert into a table using SELECT statement that retrieves specific rows from another table

	


-- create table jdepartments
-- as
-- select * from hr.departments;

select * from jdepartments;
-- delete from jdepartments where department_id>30;
select * from jdepartments;

1) Insert a row into the table with values in the correct order:-
INSERT INTO JDEPARTMENTS VALUES(40,'IT',100,1700);

2) Insert a row into the table with values in different order, but mentioned in the statement.:-
INSERT INTO JDEPARTMENTS (DEPARTMENT_NAME, DEPARTMENT_ID, MANAGER_ID, LOCATION_ID) 
VALUES ('ECE',50,101,1800);

INSERT INTO JDEPARTMENTS (DEPARTMENT_NAME, DEPARTMENT_ID, LOCATION_ID) 
VALUES ('EEE',60,1800);


3) Insert a row into the table with DEFAULT values
ALTER TABLE JDEPARTMENTS ADD STRENGTH INT DEFAULT 10;
INSERT INTO JDEPARTMENTS VALUES(70,'CSE',100,1700,DEFAULT);

INSERT INTO JDEPARTMENTS (DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID)VALUES(80,'Electicity',100,1700);	--DEFAULT value applied for STRENGTH column

4) Insert multiple rows to a table using single INSERT statement:-
-- select * from jdepartments;
INSERT ALL
	INTO JDEPARTMENTS VALUES (90,'Police',101,1700,DEFAULT)
	INTO JDEPARTMENTS VALUES (100,'Income Tax',102,1700,100)
SELECT * FROM DUAL;







SELECT 10*10 FROM DUAL;
SELECT SYSDATE FROM DUAL;

5) Insert into a table using SELECT statement that retrieves all rows from another table:-


CREATE TABLE JEMPLOYEES AS
SELECT * FROM HR.EMPLOYEES;

DELETE FROM JEMPLOYEES;

INSERT INTO JEMPLOYEES
SELECT * FROM HR.EMPLOYEES;

6) Insert into a table using SELECT statement that retrieves specific rows from another table

DELETE FROM JEMPLOYEES;

INSERT INTO JEMPLOYEES
SELECT * FROM HR.EMPLOYEES WHERE SALARY>10000;
15 row(s) inserted.

----------------------------------------------

DML statements run in transactions.
Transaction can be implicit transaction or explicit transaction.

What are implicit transactions?
	they start and end themselves.

What are explicit transactions?
	they are demacated by users.	
	the begining of transaction and the end of transaction are defined explicitly
	end of the transaction can be done by commit or rollback.
	BEGIN TRANSACTION
Every DML statement itself is a transaction



TRUNCATE
	is fast when compared to DELETE statement. Because, it is like DROP and CREATE
	DELETE works on rows one by one. It takes time. Also, in case, there are DELETE triggers, then for each row, it may fire.	TRUNCATE does not trigger DELETE Triggers.
	is DDL. It cannot be rolledback.
	only DML statements can be rolledback.
	
UPDATE
	In the table, where already you have added records, try to update one (or) all (or) specific rows. You will specify the column name and value in the UPDATE statement. WHERE condition is optional. If you do not provide WHERE condition, then all rows are updated.


DELETE



SQL> ALTER TABLE EMP ADD NATIONALITY VARCHAR2(50);

Table altered.

Activity:
	UPDATE	(All rows, specific row(s))
	DELETE	(specific row(s), all rows)

Understand the difference between DELETE and TRUNCATE
------------------------------------------------------------------------------
TCL
	Transaction Control Language
		COMMIT
		SAVEPOINT
		ROLLBACK

DCL
	Data Control Language
		GRANT
		REVOKE

PRIVILEGES
		OBJECT PRIVILEGES
			SELECT ON EMPLOYEES
			INSERT
			UPDATE
			DELETE
		SYSTEM PRIVILEGES		
			CREATE SESSION
			CREATE TABLE
			CREATE USER
			



CREATE USER JAG IDENTIFIED BY JAG;


SYSTEM PRIVILEGES are not cascade.
	means?
		GRANT CREATE TABLE TO GOWRIKA WITH ADMIN OPTION
		if SYS grants CREATE TABLE with admin option to gowrika, 	
		then gowrika grants this privilege to shushwant
		After that SYS revokes this privilege from gowrika,
		but shushwant continues to use this privilege.


OBJECT PRIVILEGES	 are cascade
		GRANT SELECT ON EMPLOYEES TO GOWRIKA WITH GRANT OPTION;
		now, gowrika can grant this privilege to shushwant.
		when sys revokes the privilege from gowrika,
		shushwant also lose this privilege.

-------------------------
Activity:
	understand the privileges in oracle.
	types of privileges
	WITH ADMIN OPTION
	WITH GRANT OPTION



error: ORA-65096: invalid common user or role name in Oracle database

CREATE USER statement gives error as above.

Till Oracle 11g this problem was not there.
From Oracle 12c onwards this problem is there.
check db version:
	SELECT banner FROM v$version WHERE ROWNUM = 1;

 show con_name

CON_NAME
------------------------------
CDB$ROOT

change from CDB to PDB:-
	alter session set container = ORCLPDB;
Session altered.


	
show con_name;

CON_NAME
------------------------------
ORCLPDB

--------------------------------------------------------------------
SELECT
	statement is used to retrieve records from one or more tables, views, etc.

FROM
WHERE
ORDER BY
GROUP BY
HAVING

OPERATORS
	=
	>
	<
	>=
	<=
	!=				<>
	IN				NOT IN
	BETWEEN				NOT BETWEEN
	NOT
	AND
	OR
	LIKE
	ALL
	ANY		SOME

	>=ALL
	<=ANY

Activity:
	WRITE SQL statement with WHERE CONDITION using the above operators.



LIKE uses the following wild card characters:
	_			1 and only 1 character
	%			0 or more character(s)


select * from hr.employees WHERE JOB_ID NOT IN ('ST_CLERK','AD_PRES');

SELECT * FROM HR.EMPLOYEES WHERE SALARY BETWEEN 10000 AND 11000;
	--including 10000 and 11000 and all in between

--------------------
functions
	SUM
	COUNT
	MIN
	MAX
	AVG
	FLOOR
	CEIL
	ABS
	SQRT



Oracle SQL provides a wide range of built-in functions that allow you to perform various operations on data within your database. These functions can be categorized into several groups based on their functionality. Here are some common categories of Oracle SQL functions:

Scalar Functions: These functions operate on a single value and return a single value. Some examples include:

UPPER() and LOWER(): Convert text to uppercase or lowercase.
LENGTH() and LEN(): Determine the length of a string.
SUBSTR() and SUBSTRING(): Extract a substring from a string.
CONCAT() or ||: Concatenate two or more strings.
TO_NUMBER(), TO_DATE(), TO_CHAR(): Convert between different data types.
Numeric Functions: Functions that work with numeric data:

ROUND(), CEIL(), FLOOR(): Perform rounding or truncation operations.
ABS(): Return the absolute value of a number.
MOD(): Return the remainder of a division.
POWER(), SQRT(): Perform exponential and square root calculations.
Date and Time Functions: Functions for working with date and time values:

SYSDATE: Return the current system date and time.
TO_DATE(), TO_TIMESTAMP(): Convert strings to date or timestamp values.
ADD_MONTHS(): Add a specified number of months to a date.
MONTHS_BETWEEN(): Calculate the number of months between two dates.
EXTRACT(): Retrieve specific components (year, month, day, etc.) from a date.
String Functions: Functions for manipulating string data:

INSTR(): Find the position of a substring in a string.
LTRIM() and RTRIM(): Remove leading or trailing spaces from a string.
TRIM(): Remove specified characters from the beginning and/or end of a string.
REPLACE(): Replace occurrences of a substring in a string.
Aggregate Functions: Functions that perform calculations across multiple rows:

SUM(), AVG(), MIN(), MAX(): Calculate sum, average, minimum, and maximum values in a column.
COUNT(): Count the number of rows or non-null values in a column.
GROUP BY and HAVING: Used in combination with aggregate functions to group and filter data.
Conversion Functions: Functions for converting data types:

TO_NUMBER(), TO_DATE(), TO_CHAR(): Convert between different data types.
Advanced Functions: Functions that perform more specialized operations:

NVL() and NVL2(): Handle NULL values by substituting them with other values.
DECODE(): Perform conditional comparisons and return a result based on conditions.
CASE expression: Perform conditional logic within a query.
These are just some examples of the many functions Oracle SQL provides. Each function serves a specific purpose and can greatly enhance your ability to manipulate and retrieve data from your database.


scalar = single row functions		works on each row and produce 1 result per row
EX:	UPPER
SELECT FIRST_NAME, UPPER(FIRST_NAME) FROM HR.EMPLOYEES;

aggregate = multi row functions 		work on multiple rows and product 1 result per group.
EX:	SUM
SELECT SUM(SALARY) FROM HR.EMPLOYEES;