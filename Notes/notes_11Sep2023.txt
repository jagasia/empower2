Day 11:
JDBC concepts:
	Driver		db vendors provide the java implementation driver
			ex:	ojdbc8.jar,		h2-2.2.222.jar,	etc
			In new versions of java from 8, driver is loaded automatically 			based on the URL	

	URL		is used to connect to a particular database in the same or different 			system in network
			ex:	jdbc:h2:file:./data/sampledata
				jdbc:mysql://localhost:3306/dbname
				jdbc:oracle:thin:@localhost:1521:XE

	username:		db username	like sys in oracle, 	root in mysql, sa in h2
	password:

	Statement
			Statement		for simple/ complete sql statements	
					con.createStatement()
			PreparedStatement	for sql statements with parameters
					con.prepareStatement()
			CallableStatement	for calling stored procedures and functions
					con.prepareCall()
					(pl/sql)

	execute methods
			st.execute()	can be used for sql statement
					is a void method	
			st.executeQuery()	can be used for SELECT statement
					returns ResulSet
			st.executeUpdate()	can be used for DML statement
					returns int		no of rows affected
------------------------------------------------------------------------------------------------------------------------------------
JDBC DAO layer CRUD 
--------------------------------
	is based on a design pattern		DAO pattern
	Data Access Objects

Suppose, there is an E-R diagram
	Employee is found as an entity.

Employee
	id
	firstName
	lastName
	salary

if i inform this much detail, then you will go ahead and complete the 
	Employee.java	
	EmployeeDao.java
	EmployeeDaoImpl.java

DAO
	contains the code that is necessary to access the database	(EMPLOYEE table)

Employee class in java is mapped to EMPLOYEE table in database.
class name	=>	table name
properties		=>	columns

what is property?
	a class member that has getter/setter/both is a property

Demo:
	Create a DAO pattern for STUDENT table.
	STUDENT
		ID
		NAME
		ADDRESS
		PHONE

You should create
	Student.java		entity class
	StudentDao.java		interface		(we can extract this from impl)
	StudentDaoImpl.java		implementation of that interface

Steps:
1) create a java project	11-sep-student-dao
2) add h2 driver jar file to the project folder
	copy the h2 jar from softwares folder to our project folder	\bin folder
3) set this jar to our classpath
	right project -> properties -> java build path -> libraries tab -> add external jar
4) lets connect to h2 db console
	double click the jar file
	copy the JDBC URL	for our coding:	jdbc:h2:file:./data/sampledata
	click connect button
5) CREATE TABLE STUDENT
(
ID INT PRIMARY KEY,
NAME VARCHAR2(20),
ADDRESS VARCHAR2(50),
PHONE VARCHAR2(13)
);
6) Create Student class

public class Student {
	private Integer id;
	private String name;
	private String address;
	private String phone;
	
	public Student() {}

	public Student(Integer id, String name, String address, String phone) {
		super();
		this.id = id;
		this.name = name;
		this.address = address;
		this.phone = phone;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Override
	public String toString() {
		return "Student [id=" + id + ", name=" + name + ", address=" + address + ", phone=" + phone + "]";
	}
	
}

7) StudentDaoImpl
	this a CRUD implementations
	Create, Read, Update, Delete

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class StudentDaoImpl {
	public void create(Student student) throws SQLException {
		//add a new row to the STUDENT table
		Connection con = getMyConnection();
		PreparedStatement st = con.prepareStatement("INSERT INTO STUDENT VALUES(?,?,?,?)");
		st.setInt(1, student.getId());
		st.setString(2, student.getName());
		st.setString(3, student.getAddress());
		st.setString(4, student.getPhone());
		int no=st.executeUpdate();
		System.out.println(no+" row inserted");
		con.close();
	}
	
	public void read() throws SQLException {
		Connection con = getMyConnection();
		con.close();
	}
	public void read(Integer id) throws SQLException {
		Connection con = getMyConnection();
		con.close();
	}
	public void update() throws SQLException {
		Connection con = getMyConnection();
		con.close();
	}
	public void delete() throws SQLException {
		Connection con = getMyConnection();
		con.close();
	}

	private Connection getMyConnection() throws SQLException {
		Connection con = DriverManager.getConnection("jdbc:h2:file:./data/sampledata","sa","");
		return con;
	}
}


8) Task is for you.
	You need to complete the remaining methods of CRUD.
	read methods, I will do.
	UPDATE, DELETE, you will do now.

finally, the StudentDaoImpl:
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class StudentDaoImpl {
	public void create(Student student) throws SQLException {
		//add a new row to the STUDENT table
		Connection con = getMyConnection();
		PreparedStatement st = con.prepareStatement("INSERT INTO STUDENT VALUES(?,?,?,?)");
		st.setInt(1, student.getId());
		st.setString(2, student.getName());
		st.setString(3, student.getAddress());
		st.setString(4, student.getPhone());
		int no=st.executeUpdate();
		System.out.println(no+" row inserted");
		con.close();
	}
	
	public List<Student> read() throws SQLException {
		Connection con = getMyConnection();
		Statement st = con.createStatement();
		ResultSet rs = st.executeQuery("SELECT * FROM STUDENT");
		List<Student> studentList=new ArrayList<>();
		while(rs.next())
		{
			Student student=new Student(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4));
			studentList.add(student);
		}
		con.close();
		return studentList;
	}
	public Student read(Integer id) throws SQLException {
		Connection con = getMyConnection();
		PreparedStatement st = con.prepareStatement("SELECT * FROM STUDENT WHERE ID=?");
		st.setInt(1, id);
		ResultSet rs = st.executeQuery();
		Student student=null;
		if(rs.next())
		{
			student=new Student(rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4));
		}
		con.close();
		return student;
	}
	public void update(Student student) throws SQLException {
		Connection con = getMyConnection();
		PreparedStatement st = con.prepareStatement("UPDATE STUDENT SET name=?, address=?, phone=? WHERE id=?");
		st.setString(1, student.getName());
		st.setString(2, student.getAddress());
		st.setString(3, student.getPhone());
		st.setInt(1, student.getId());
		int no=st.executeUpdate();
		System.out.println(no+" row updated");
		con.close();
	}
	public void delete(Integer id) throws SQLException {
		Connection con = getMyConnection();
		PreparedStatement st = con.prepareStatement("DELETE FROM STUDENT WHERE ID=?");
		st.setInt(1, id);
		int no=st.executeUpdate();
		System.out.println(no+" row deleted");
		con.close();
	}

	private Connection getMyConnection() throws SQLException {
		Connection con = DriverManager.getConnection("jdbc:h2:file:./data/sampledata","sa","");
		return con;
	}
}

--------------------
9) Extract the interface from the impl
	right click inside the StudentDaoImpl class
		-> Refactor
			->Extract interface
	name of the interface:	StudentDao
		select the CRUD methods

10) Test the dao impl using Main class and main method

1) Add a student
2) Display All students
3) Find student by id
4) Update a student
5) Delete a student
6) Exit


import java.sql.SQLException;
import java.util.List;
import java.util.Scanner;
import org.h2.jdbc.JdbcSQLSyntaxErrorException;

import org.h2.jdbc.JdbcSQLSyntaxErrorException;

public class Main {

	public static void main(String[] args) throws SQLException {
		
		Scanner sc=new Scanner(System.in);
		StudentDao sdao=new StudentDaoImpl();
		try
		{
			sdao.createTable();
			System.out.println("Table created");
		}catch(JdbcSQLSyntaxErrorException ex)
		{
			System.out.println("Table already exists");
		}
		
		int choice=0;
		Integer id=0;
		String name="";
		String address="";
		String phone="";
		Student student=null;
		do
		{
			System.out.println("1) Add a student\r\n" + 
					"2) Display All students\r\n" + 
					"3) Find student by id\r\n" + 
					"4) Update a student\r\n" + 
					"5) Delete a student\r\n" + 
					"6) Exit\r\n" + 
					"");
			choice=sc.nextInt();
			switch(choice)
			{
			case 1:		//add
				System.out.println("Id:");
				id=sc.nextInt();
				System.out.println("Name:");
				name=sc.nextLine();
				if(name.equals(""))
					name=sc.nextLine();
				System.out.println("Address:");
				address=sc.nextLine();
				System.out.println("Phone:");
				phone=sc.nextLine();
				student=new Student(id, name, address, phone);
				sdao.create(student);
				break;
			case 2: 	//display all
				List<Student> students = sdao.read();
				System.out.printf("%3s\t%20s\t%20s\t%15s\n","Id","Name","Address","Phone");
				for(Student s:students)
				{
					System.out.printf("%3s\t%20s\t%20s\t%15s\n",s.getId(),s.getName(),s.getAddress(),s.getPhone());
				}
				break;
			case 3:		//find by id
				System.out.println("Id:");
				id=sc.nextInt();
				student=sdao.read(id);
				if(student!=null)
				{
					System.out.printf("%3s\t%20s\t%20s\t%15s\n","Id","Name","Address","Phone");
					System.out.printf("%3s\t%20s\t%20s\t%15s\n",student.getId(),student.getName(),student.getAddress(),student.getPhone());
				}else
				{
					System.out.println("No student found for the given id");
				}
				break;
			case 4:		//update
				System.out.println("Id:");
				id=sc.nextInt();
				System.out.println("Name:");
				name=sc.nextLine();
				if(name.equals(""))
					name=sc.nextLine();
				System.out.println("Address:");
				address=sc.nextLine();
				System.out.println("Phone:");
				phone=sc.nextLine();
				student=new Student(id, name, address, phone);
				sdao.update(student);
				break;
			case 5:		//delete
				System.out.println("Id:");
				id=sc.nextInt();
				sdao.delete(id);
				break;
			default:
				System.exit(0);
			}
		}while(true);
	}

}










	public void createTable() throws SQLException
	{
		Connection con = getMyConnection();
		Statement st = con.createStatement();
		st.execute("CREATE TABLE STUDENT(ID INT PRIMARY KEY,NAME VARCHAR2(20),ADDRESS VARCHAR2(50),PHONE VARCHAR2(13));");
		con.close();
	}


-----------------------------------
Activity:
	Create DAO pattern for Employee

Employee
	id
	firstName
	lastName
	salary

EmployeeDao		interface
EmployeDaoImpl		class			CRUD
Main
	add, delete, update, select all, select by id
----------------------------------
For tomorrow's Java assessment:		90 minutes	after morning break
1) MCQ
	15 questions
2) Coding challenge
	i) comparing 2 objects using equals method
	ii) String based challenge	(regex or logic or array or like palindrome, etc)
	iii) Comparable/ Comparator
-----------------------------------------------------
Maven
----------
\\its\its\sccm\apps
can you share your screen

Steps to install maven in our system:
1) in C:\Software folder, create a folder "Maven"
2) from \\its\its\sccm\apps 
	search "Apache Maven" folder
	and inside that, there are many versions of maven
	lets copy 3.8.5 folder to our local software\maven folder
3) inside this folder, there is a zip	(Apache Maven zip file)
	extract all
4) delete the zip
	and go inside the apache maven until you find "bin" and "lib" folders.

5) go inside bin folder
nd copy the current location
	D:\Softwares\Maven\apache-maven-3.6.1-bin\apache-maven-3.6.1\bin


6) in environment variables 
	there are 2 types of env var
	i) your account environment variable
	ii) system environment variable 	(we DONT have access to this)

we are going to our account env var:
	path variable is edited
	and appended with the apache maven bin location

a new cmd terminal 
	mvn -version
	mvn -v

we have installed maven now.

What is maven?
	is a build tool
Why we need build tool?
	we can create project of different types using a build tool
		it is possible to create, build and deploy a project even without an IDE
		without eclipse also we can do the above all using a build tool
	deployable unit can be
		jar
		war
		ear
	all these can be built using a build tool

	instead of adding .jar files to the build path,
	we can add dependencies to pom.xml

pom	=	Project Object Model
	pom is a configuration file, where, we can specify
		jar/war
		version
		dependencies
		plugins
	
when we use maven, every project does not need a separate copy of jar files
in maven local repository, one copy of jars are maintained

	C:\Users\rjaga\.m2\repository

remote repository		(maven server contains all jar files)
vs
local repository		(my system)

not every project has jar files, all the maven projects use the jar files from the .m2 repository folder
so, when we push the projects to git, every project do not have .jar files means, size of the project is lesser.
in client's system, they have only one .m2 repository folder. If jar is available, then it is not downloaded. If it is not available, then it is downloaded.
-------------------------------------------------
Maven
	there are 2 ways of creating maven projects.
	i) in cmd prompt. Using commands, we can create a maven project of different arche types.

Archetype:
	lot of types of project. Each type  of project is one archetype
	quickstart	=	java project		(core java)
	webapp	=	dynamic web project		(servlet, jsp)


	ii) using any IDE like eclipse or spring tool suite

Any maven project is uniquely identified by
	group id
	artifact id

group id:
	can be same across many projects
	com.empower.hrms
		note:	we use . to separate each portion of group id
			this is similar to package name	(java.util)
artifact id:
	is the project name
	my-demo-project
		note:	we use - to separate each portion of artifact id


Creating your first maven project in eclipse:
1) File -> New Project
2) Maven Project
3) next -> Select an archetype:		quickstart
4) group id
	com.empower.hrms
artifact id
	employee-module
package name
	same as group id

Finish creating the project.
When you create maven project for the first time, you will see lot of downloads happening and waiting for you to enter "Y"
once you enter "Y", it show "Build Successful".

By default, an App.java is created
Just run the project and see "Hello World!" as output.
----------------------------
Now, how to create such quickstart maven project, in cmd prompt:

1) choose a location where you want to create a maven project.
in that folder, address bar, type "cmd" enter
Now, we have gone to cmd prompt in the folder we want to create maven project.
2) now, the command to create the project:

mvn archetype:generate -DgroupId=com.jag.example -DartifactId=java-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false




mvn is the command for all maven related tasks.

mvn archetype:generate -DgroupId=ToolsQA -DartifactId=DemoMavenProject -DarchetypeArtifactId=
maven-archetype-quickstart -DinteractiveMode=false

----------------------------------------------------
earlier, we added the h2 jar file to our build path
but in maven, we will do in different approach.

---------------------------
Same student dao project we have done in morning, how do we do in maven?
difference will be, we will not add jar file to the project build path. Instead,
we will add dependency in pom.xml file.

jar	java archive
war	web archive
ear	enterprise archive

1) create a maven project of quickstart archetype.
	student-module
2) in pom.xml
	under dependencies:	add the h2 dependency.

<!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>2.2.222</version>
			<scope>runtime</scope>
		</dependency>


3) complete the coding
4) run

