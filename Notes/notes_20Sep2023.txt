Day 17: (20-Sep-2023)
-----------------------------
Spring Boot(RESTFul Service, POSTMAN, â€¦), Maven Tool

Spring Boot:
------------------
	Spring boot is convention over configuration. If you follow the convention, you do not 		need configuration.
	Auto-Configuration
	Standalone
	Starter dependencies
	CLI		Command Line Interface
		without any IDE, we can completely do a project using notepad and cmd

Demo:
	create a hello world program in spring boot.

https://start.spring.io/

it will take us to spring initializr

Project: Maven
Language: Java
Spring boot version: 2.7.15
group id: com.empower.ecom
artifact: first-boot
packaging: 	war 	(for mvc) 	and jar for restful webservices
java version:	8
dependencies:
	Spring Web

click the generate button to download the zip
unzip to your workspace folder

How to import?
File -> Import -> 		Existing maven projects
				choose the location where pom.xml is present
allow the download process to complete.

version issues:
	right click project-> properties
		java build path		check jdk version
		java compiler
		project facets


open the Application.java	(where main method is present)
	if project name is "first-boot" then application class name is FirstBootApplication

System.out.println("Hello world");

Run the project as "Java Application"

If port number 8080 is in use, we can change it:	in configuration file
	application.properties:		(under src/main/resources)

		server.port=8081

Important things to follow:
1) Application class	(ex:	FirstBootApplication)
	this class is present in a package. That package is the base package.
	All other classes and interfaces must be present inside the base package (or its sub 	package)


com.empower.ecom
com.empower.ecom.model
com.empower.ecom.controller
com.empower.ecom.config

all the above are under com.empower.ecom package only
com.empower.model		NOT ALLOWED
com.empower.controller	NOT ALLOWED

application.properties is our configuration file. We can have many configuration classes in addition to this.

-------------------------------------------------------------
Spring Boot MVC
1) Create spring boot project using spring initializr

Project:	Maven
Language:	Java
Spring Boot:	2.7.15
Group:	com.empower.ecom
Artifact:	20-sep-mvc
Packaging:	war
java:	8
Dependencies: web

Upto Hello world, it is done.

2) under webapp folder, create "WEB-INF/views" folder
3) inside views folder, create index.jsp
4) index.jsp		hello world
5) application.properties	(this file is present under src/main/resources folder)
server.port=8080
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

6) create the controller class.	Remember it must be inside base package or its sub package
package com.empower.ecom.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class MyController {
	@GetMapping
	public String home()
	{
		return "index";
	}
}

7) Error:
"Path with "WEB-INF" or "META-INF": [WEB-INF/views/index.jsp]"

	solution:
		in pom.xml add a dependency:
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
8) Stop and Run the application
	localhost:8080

----------------------------------------------------
Activity:
	Create 
		login.jsp
		signup.jsp

	in controller, create the methods to show these pages.

-------------------------------------------------------
spring boot MVC with h2

Spring	
	core
	jpa		Java Persistence API
	mvc
	rest
	security

JPA
	data access
	we dont need to write SQL statements like SELECT, INSERT, UPDATE, DELETE
	automatically create the tables for the entity classes we have

	ORM	Object Relational Mapping

	JPA	concept
		EJB
		Hibernate framework
		JPA framework
		Spring Data JPA

Relationship between entities:	(remind me)

Product
	id
	name
	price

JPA repository we use. 
CrudRepository	conversion of object to JSON was not automatic. So we use jpa repository

----------------------
1) create a spring boot project
2) dependencies
	spring web
	spring data jpa
	h2
	apache tomcat embed
3) application.properties
	prefix
	suffix
spring.datasource.url=jdbc:h2:file:./data/sampledata
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.show_sql=true

4) Product.java		(entity)
5) ProductRepository.java	(repository interface)
6) ProductController.java	(controller)
7) product.jsp



@Entity
@Table(name="PRODUCT")
public class Product

if we do not mention the table name, then it is same as entity class name.
if entity class name is 	Product
then table name is		PRODUCT

if entity class name is 	UserDetails
then table name is		USER_DETAILS

Sometimes, we dont want jpa to change the names,:
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

-------------
Entity class should contain a primary key COMPULSORY.
	@Id

@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;

auto generation does not work for String, Double etc. works only for Integer types

4) Product.java		(entity)
package com.empower.ecom.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="PRODUCT")
public class Product {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
//	@Column(name = "PRODUCT_NAME")
	private String name;
	private Double price;
	
	public Product() {}

	public Product(Integer id, String name, Double price) {
		super();
		this.id = id;
		this.name = name;
		this.price = price;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + ", price=" + price + "]";
	}
	
}


5) ProductRepository
package com.empower.ecom.model;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ProductRepository extends JpaRepository<Product, Integer>
{

}

6) ProductController
