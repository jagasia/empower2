Day 20: (25-Sep-2023)
-----------------------------
Shell Scripting, Variables, Functions

Shell is not a scripting language, it is an environment to run scripts.
Shell is similar to cmd prompt in windows.

What is a script?
	it is a program.
	that can declare variables, assign values, arrays, create functions, call them, get input, print output, etc

how to create a script file?	we need an editor?
	vi editor
type	"vi" in bash

vi sumanth.sh

this editor has 2 modes:
	i) insert mode
	ii) execute mode

insert mode:
	you can type text
execute mode:
	you can type commands like		save, exit, delete

commands:
	i		for switching to insert mode
	w		save
	q		quit


vi sumath.sh	(i for insert mode)
-------------------------------------------------------
function display()
{
        echo Hi, your first name is $1 and your lastname is $2.
}

name=Jag;
echo Hello $name;

today=`date`;
echo Today is $today;

display Chenna KeshavaReddy

--------------------------------
to exit
	esc :wq

to run
	./sumanth.sh
Activity:
Create a shell script and declare variables and create functions, call them multiple times with different arguments.
Run the script.
----------------------
Install git in your computer from software center.
after installation
in windows start menu, type "Git Bash"
open git bash to execute "linux/unix" commands in your system.
-------------------------------------------------------------------------------------
C programming language:
------------------------------------
C is a structured language.
	main function is the first function to execute
There are many C platforms and compilers. There are differences in these C language itself.
Size of int is 2 in 32 bit platform. but the size of int is 4 bytes in 64 bit platform.

Turbo C
GCC

-----------------------------
Control statements, Arrays, Strings
	if
	if else
	if else if else
	switch case
	break	continue
	while
	do while
	for


data types in C language:
-----------------------------------
Data Type 

short int 

unsigned short int 

unsigned int 

int 

long int 

unsigned long int 

long long int 

unsigned long long int 

signed char 

unsigned char 

float 

double 

long double 


------------------------------------



#include <stdio.h>

int main()
{
    char c='A';
    int i=-1;
    if(c)
        printf("Good");
    else
        printf("Bad");

    printf("%d",c);
    return 0;
}

-------------------------------
different beween 
	break and continue

break
	exits the loop
	skips all the lines below

continue
	skips all the lines below
	forces the next iteration

---------------------------------------------------
In spring data JPA, how to write Queries?
	why we need to write queries?
		for requirements other than usual.
		CRUD are already provided by JPA


Find All Employees by Id		(already done)


EMPLOYEE	(table)
Employee		(class)

@Query("select e from Employee e where e.salary between :from and :to")
List<Employee> findEmployeesBySalaryRange(@Param("from") Double from, @Param("to") Double two);


Activity:
Allow users to find employees by name.
	name can be case insensitive
	a portion of name can be typed in the search

select e from Employee e where UPPER(e.name) LIKE '%:name%'
----------------------------------------------------------------
if you require demo, remind me afternoon.
----------------------------------------------------------
Spring Security
-----------------------
	Authentication
		
	Authorization
	Access control List	(who is allowed and not)
	only specific users are allowed
	
	
Authentication
	is the process of checking the identity of the user
Authorization
	is the process of checking if the user has permission or not
Impersonation
	acting on behalf of other

------------------------------------------------------------
Spring boot security

add the spring boot starter security dependency to the pom.xml

by adding this dependency, it automatically configures the security.
SecurityAutoConfiguration.class

package com.empower.ecom;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication(exclude = SecurityAutoConfiguration.class)
@RestController
public class Application {
	
	@GetMapping
	public String home()
	{
		return "Hi welcome";
	}

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
		System.out.println("Hello world");
	}

}

///////////////////////
@SpringBootApplication(exclude = SecurityAutoConfiguration.class)
this prevents the auto configuration


now restart
try to access 
	localhost:8080

it is asking username & password

username:		user
password:		9b0617d6-855e-4626-9f73-6afd1d97d4a7

this password changes when we restart.

------------------------------
how to change the username and password?

in application.properties:
spring.security.user.name=sumanth
spring.security.user.password=sumanth@123


now, restart
check any url
	login page comes
	enter the username and password as per configuration

Activity:
	to try upto this.
-----------------------------------
before lunch break, we configured the username and password in application.properties

1) create a configuration class
	class MySecurityConfiguration implements WebSecurityConfigurer
	class MySecurityConfiguration extends WebSecurityConfigurerAdapter



@Configuration
public class MyConfiguration extends WebSecurityConfigurerAdapter
{

}

2) override the configure method
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		// TODO Auto-generated method stub
		super.configure(auth);
	}

3) replace the code inside configure method and finally the config class looks like:
@Configuration
public class MyConfiguration extends WebSecurityConfigurerAdapter
{
	@Autowired
	private MyUserDetailsService userDetailsService;

	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.userDetailsService(userDetailsService);
	}
	
	@Bean
	public PasswordEncoder passwordEncode()
	{
		return NoOpPasswordEncoder.getInstance();
	}
}
4) MyUserDetailsService:
@Service
public class MyUserDetailsService implements UserDetailsService
{

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		return new User("latha","latha@123",new ArrayList<>());
	}

}
----------------------------Run and check


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>