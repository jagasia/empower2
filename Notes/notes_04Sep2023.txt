Day 6:
online session:
	12:30	lunch
	4:00 	break
	6:00	break
	8:00	dinner
Last day, we discussed about arrays.

Employee arr[]=new Employee[10];
new operator.
Pending:	array of objects.
------------------------------------------
Strings
	What is a String?
		basically a text within quotes.	
		single quote for a char. double quote for a string
		collection of characters.

char x='a';	
String y="Raja";

String is made up of characters.
c language, c++ language,there it was like char array was used as String.

char arr[10];	//in C, C++ language, we store 9 characters and the last position is for null terminator.		\0

String in java, does not need null terminator.	
Here, it is not an array of characters.

String was stored in a special memory location	
	PermGen		Permanent Generation memory

jdk 1.8 onwards, Strings are stored in heap.

Only heap memory is garbage collected.
	Garbage Collector 	
		is thread that runs parallel to our program.
		will find the objects that are out of scope and
		remove them from the memory.
String is very peculiar.

String is a class.
How do we create an object of a class?
String str1=new String();

Date dt1=new Date();

2 steps of creating an object of a class:
1) declaration ref var of the class		
2) instantiation	new	(creating an object of the class)


int i;		//i is created	(memory is allocated)
Date dt1;		//dt1 is declared	(stack)
dt1=new Date();	//memory is allocated in heap

new Date();	//an object of the class Date is created

without using "new" operator, we cannot create an object.

Date dt1=new Date();
Date dt2=dt1;	//did i create another object?	No. 
		dt2 also refers to the same memory of dt1

dt1 and dt2 are reference variables that are pointing to same memory

Date dt1=null;		dt1 is in stack
dt1=new Date();	heap memory is created, and its location is stored in dt1 in stack.

new Date();	//heap memory is created. But its reference is not 		kept in stack.

System.out.println(new Date());

String str1=new String("hello");	//fine
String str2="hello";		//peculiar

"hello" is an object. It is present in heap



==
.equals()



		String str1="hello";
		String str2="hello";
		
		System.out.println(str1==str2);

output is true
	because, str1 and str2 references to same memory location.

a==b	what is compared? values? or references?

==
	check if the values are equal(if operands are value types)
	check if the references are equal(if operands are ref types)

	
String is a reference type. So if you want to compare their values,
	str1.equals(str2)

---------------------
String str1=new String("hello");
String str2=new String("hello");
System.out.println(str1==str2);

output:	false

because, == compares the references of ref types.
-------------------------
	    String str1=new String("hello");
	    String str2=new String("hello");
// 		System.out.println(str1==str2);

        System.out.println(str1.equals(str2));

output: true
	because, equals() method always compare the values.

String
	is immutable.

we can't modify the string
str1=new String("hello");
str1="world";

str1=str2;		//is it possible. Yes.
same way,
str1="india";	//we have not changed the value. we changed the reference.

int i=20;
int j=i;		//values are copied.

= operator also, copies, values/ reference based on the type of variable.

so whenever we use = on a String, we are changing the reference.

we are actually creating a new string or changing the reference
it does not mean, we change the values.

string is not a variable that allow us to change the value alone.

String str="hello";

if you want to replace "h" with "H".

    String str="hello";
    str=str.substring(1);
    // System.out.println(str);
    str="H"+str;
    System.out.println(str);
		

What is mutable string?
	StringBuilder
	StringBuffer

advantage of these 2 classes:
	we can create an object in a memory location.
	memory location will be same.
	Only the values in it can be changed.

Activity:
	Understand the benefits of 
	StringBuilder
	StringBuffer

	and find the difference between these 2 classes.
StringBuilder
vs
StringBuffer
	both of these classes have same properties and methods.
	but StringBuffer is synchronized. StringBuilder is not sync

what is synchronized?
	when multiple thread access this object, only 1 thread is allowed at a time.	one by one the threads can access.
Apart from this difference, both StringBuilder and StringBuffer are same.

Since StringBuilder does not synchronize the threads, it is fast.
StringBuilder
-------------------
	str="hello";	//not possible in StringBuilder

StringBuilder sb=new StringBuilder("hello");
String str="hello";
sb=new StringBuilder(str);		//string is copied to sb
//or

sb.append(str);
sb.append("world");

append
replace
delete

Practise, 
	StringBuilder methods to append, replace, delete characters.
https://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html



Pending:
	regex

--------------------------
How to convert a String into char array
If you convert, you will be able to access each character at a time

ex:
	Find if the input String is a palindrome or not.
what is a palindrome?
	a string, whose reverse is same as the original string.
ex:	
	madam
	malayalam
	mam
	dad
	mom

How to solve this problem?
1) we can reverse a string and find if it is same
2) compare char at index 0 with n-1 index char
	0+1	n-1-1
	0+2	n-1-2
	0+3	n-1-3
until startindex and end index cross eachother.

malayam
0=m	n-1-0=m
1=a	n-1-1=a
2=l	n-1-2=l
3=a	n-1-3=a		7-4=3	middle char
4=y	n-1-3		NO NEED TO PROCEED

traverse from left.	traverse from right.
when they cross, we can conclude.
To be able to work on this algorithm, we should be able to access each character at a time.

SonarQube	(code quality)
	commented java code are poor practice.
	comments that explain the code are good practice.


//to find if the input string is a palindrome or not
        Scanner sc=new Scanner(System.in);
        String input=sc.next();
        //access elements from left and also from right
        int n=input.length();   //String, length is a method () 
        //in arrays, length is a variable   arr.length  //no brackets
        for(int i=0;i<=n/2;i++)
        {
            // System.out.println(input.charAt(i)+" vs "+input.charAt(n-1-i));    
            if(input.charAt(i)!=input.charAt(n-1-i))
            {
                System.out.println("Not palindrom");
                System.exit(0);
            }
    	}
    	System.out.println("palindrom");


--------------------------------
we used charAt(index) in the above program.
---------------------------------
Another approach:
convert the String into char array

        //to find if the input string is a palindrome or not
        Scanner sc=new Scanner(System.in);
        String input=sc.next();
        char []arr=input.toCharArray();    //methods are in camelCase. first letter small. Every next word first letter is in upper case.
        int n=arr.length;
        for(int i=0;i<=n/2;i++)
        {
            if(arr[i]!=arr[n-1-i])
            {
                System.out.println("Not palindrome");
                return;
            }
        }
        System.out.println("palindrome");

----------------------------
String does not have reverse method.
StringBuilder has reverse() method

//to find if the input string is a palindrome or not
        Scanner sc=new Scanner(System.in);
        String input=sc.next();
        StringBuilder sb=new StringBuilder(input);
	//another way		sb.append(input);
        sb.reverse();
        System.out.println(sb); //println method automatically calls the toString() method 
        //sb.toString()
        
        // String temp=sb; //wrong      
        String temp=sb.toString();
        if(input.equals(temp))
            System.out.println("palindrome");
        else
            System.out.println("Not palindrome");

-----------------------------------------
sb.append(str);	//String to StringBuilder
str=sb.toString();	//StringBuilder to String
--------------------------
String challenges:
-----------------------------------------------------------
refer to file name: String_Challenge1.txt
1) Character at Index

//challenge: Character at Index

        Scanner sc=new Scanner(System.in);
        String input=sc.next();
        int n=sc.nextInt();
        if(n<0)
            System.out.println("Invalid");
        else
            System.out.println(input.charAt(n%input.length()));
------------------
Challenge2: Last Character
refer to file String_Challenge1.txt


Find the last occurrance of a character that occurs n times


Scanner sc=new Scanner(System.in);
        int noOfChars=sc.nextInt();
        char arr[]=new char[noOfChars];
        for(int i=0;i<noOfChars;i++)
        {
            arr[i]=sc.next().charAt(0);
        }
        int n=sc.nextInt();
        int maxCount=-1;
        char result='\0';
        for(int i=0;i<noOfChars-1;i++)
        {
            // System.out.println(arr[i]);
            int localCount=1;
            for(int j=i+1;j<noOfChars;j++)
            {
                // System.out.println("-----"+arr[j]);       
                if(arr[i]==arr[j])
                {
                    // System.out.println("Local count increments because "+arr[i]+" = "+arr[j]);
                    localCount++;
                }
            }
            // System.out.println(arr[i]+" is found "+localCount+" times");
            if(localCount>=maxCount)
            {
                maxCount=localCount;
                //whenever max count is updated, what was that character?
                result=arr[i];
            }
        }
        if(maxCount==n)
            System.out.println(result);
        else
            System.out.println(-1);
-----------------------------------------------------
Air India
AI006		
Spice Jet
SJ005

--------------
Challenge 3:
Masked Numbers

refere file String_Challenge1.txt


import java.util.*;
public class Main
{
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        String n = input.next();
        int y = input.nextInt();
        boolean foundSolution = false;
        for (int x=0;x<10 ;x++ ){
            String replacedstr = n.replace("X",Integer.toString(x));
            int replacednum = Integer.parseInt(replacedstr);
            if (replacednum % y ==0){
                foundSolution = true;
                System.out.println(replacednum+",");
            } 
        } 
        if(foundSolution){
            System.out.println();
        } else {
            System.out.println("-1");
        }
    }
}

---------------modified by jag--------------
Scanner input = new Scanner(System.in);
        String n = input.next();
        int y = input.nextInt();
        boolean foundSolution = false;
        boolean isFirst=true;
        for (int x=0;x<10 ;x++ ){
            String replacedstr = n.replace("X",Integer.toString(x));
            int replacednum = Integer.parseInt(replacedstr);
            if (replacednum % y ==0){
                foundSolution = true;
                if(!isFirst)
                    System.out.print(',');
                System.out.print(replacednum);
                isFirst=false;
            } 
        } 
        if(!foundSolution){
            System.out.println("-1");
        }
-----------------------------------------------
Challenge 4:
Tic-Tac Toe Game
--------------------------
Complete this challenge.

import java.util.*;
public class Main
{
    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);

        int col = scn.nextInt();
        int row = scn.nextInt();
        String[][] str = new String[col][row];

 

        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                str[i][j] = scn.next();
            }
        }

        int countX = 0;
        int countO = 0;

        //ROW CASE
        for(int i = 0; i < row; i++){
            countX = 0;
            countO = 0; //Initialize it to 0 after every Inner loop 
                        //so that it does not take 2 'X' from row 1 + 1 'X' from row 2 as TRUE           
            for(int j = 0; j < col; j++){
                if(str[i][j].equals("X")){
                    countX++;
                }
                else
                    countX = 0;

                if(str[i][j].equals("O")){
                    countO++;
                }
                else
                    countO = 0;
            }
            if(countX == 3){
                System.out.println("meyapa");
                System.exit(0);
            }
            if(countO == 3){
                System.out.println("roshan");
                System.exit(0);
            }
        }

        //COLUMN CASE
        for(int i = 0; i < row; i++){
            countX = 0;
            countO = 0;
            for(int j = 0; j < col; j++){
                if(str[j][i].equals("X")){
                    countX++;
                }
                else
                    countX = 0;

                if(str[j][i].equals("O")){
                    countO++;
                }
                else
                    countO = 0;
            }
            if(countX == 3){
                System.out.println("meyapa");
                System.exit(0);
            }
            if(countO == 3){
                System.out.println("roshan");
                System.exit(0);
            }
        }

        //DIAGONAL CASE
        if(str[0][0].equals("X") && str[1][1].equals("X") && str[2][2].equals("X")){
            System.out.println("meyapa");
                System.exit(0);
        }

        if(str[0][2].equals("X") && str[1][1].equals("X") && str[2][0].equals("X")){
            System.out.println("meyapa");
                System.exit(0);
        }

        if(str[0][0].equals("O") && str[1][1].equals("O") && str[2][2].equals("O")){
            System.out.println("roshan");
                System.exit(0);
        }

        if(str[0][2].equals("O") && str[1][1].equals("O") && str[2][0].equals("O")){
            System.out.println("roshan");
                System.exit(0);
        }

        //If none of the exit() statements are executed
        System.out.println("Draw");

    }
}
---------------------------------------------------------------
Object Oriented Programming
------------------------------------------
We will start using classes and objects.
Why OOP is required?
If you notice, the challenges are solving, they are algorithm based. These may be part of a large project.
If you project, the complexity will increase.
To deal with the complexity, we need to build the project using OOP approach.

c language programs
	variables
	functions

java programs
	class
		variables
		methods

Boxing
	cover the variables and methods inside a box
	called as class

class is a wrapper that wraps the variables and methods.

If you just see a football games played in computer.
Player
	behavior:	run, kick, block
Ball
Boundary

Lets define the objects involved in the business and represent it as closer as possible to the real life.

entities and relationships
CUSTOMER purchase PRODUCT

Customer became a table in the database
Customer becomes a class in java program

Entities 
	identity
	behavior

identities are variables
behaviors are methods

Mathematics
	no1
	no2
	------------
	add()
	subtract()
	divide()
	multiply()

interface
	3.5mm jack
	Oneplus mobile does not have 3.5mm jack. Means, i cannot connect such earphones to one plus mobile.

interface Speaker
{}

class ThreePointFiveJack implements Speaker
{}

class SoundBar implements Speaker
{}
	public void playMusic(Speaker s)
	{
	}

method1(new ThreePointFiveJack());
method1(new SoundBar());

classes provide a type
you are defining a type

Primitives are data types. All others are just types.

class Address
{
	String dno, street, city, pin, state;
}

you have created a type called Address

class Employee
{	
	Integer id;
	String name;
	Address address;
}

Class is also used to create COMPOSITE types.

class is a blueprint for creating objects.

TABLE		 CLASS
ROWS		Objects

Whenever you create a class.
1) name of the class should be a noun.
2) class name starts with Upper case. Every next word also starts with upper case.
3) class name and the file name ideally be same.
	In case if you have multiple classes defined in single file, then only 1 class can be public. That class name should be the file name.
4) a class can have variables of public, private, protected, <<default>>
But it is good practice to have non public data members.
by using public you are provided full access to the variables, which is not good.
5) provide access to those variables, using getters and setters.


public class Department
{
    private Integer id;
    private String name;
    
    
    
}

Main.java:6: error: id has private access in Department
        d.id=20;
         ^
1 error

-------------
getters and setters:

public class Department
{
    private Integer id;
    private String name;
    
    public void setId(Integer id)
    {
        this.id=id;
    }
    
    public Integer getId()
    {
        return this.id;
    }
    
}

Why not allow the variables to be public?
why to make them non public and then provide access using public setter and getter?

ans:
	setters are methods, they can check the values and reject or allow them.
	getters can transform the data into any required format.


Class:
	naming conventions
	if a class has a constructor with argument, then it must have constructor without argument also.
	non public data members
	getters and setters
	toString		method can be useful to display

public String toString()
    {
        return id+" - "+name;
    }


	public boolean equals(College college)
	{
		return false;
	}

Department d=new Department();	//constructor

In every class, we create, if we do not create any constructor, then that class will have a constructor automatically created by the compiler.
This constructor is called as default constructor.
A default constructor is a no-arg constructor.
but if we create a constructor with argument, then compiler will not create any constructor. so we need to define it.



Challenges i am going to give you for classes and objects.
simple.
You create a class based on the instructions given.

Challenge1:
Java_Mock_11.docx

Requirement 1

import java.util.Date;
import java.text.SimpleDateFormat;

public class College
{
    private String name;
    private String website;
    private String mobile;
    private String founder;
    private Integer numberOfDept;
    private String location;
    private Date startingDate;
    
    public College()    //constructor is a special method, whose name is same as the classname. No return type. 
    {
        //constructors are called automatically when we create objects of the class.
    }
    
    public College(String name, String website, String mobile, String founder, Integer numberOfDept, String location, Date startingDate)
    {
        this.name=name;
        this.website=website;
        this.mobile=mobile;
        this.founder=founder;
        this.numberOfDept=numberOfDept;
        this.location=location;
        this.startingDate=startingDate;
    }
    
    public String getName()
    {
        return name;
    }
    public void setName(String name)
    {
        this.name=name;
    }
    public String getWebsite()
    {
        return website;
    }
    public void setWebsite(String website)
    {
        this.website=website;
    }
    public String getMobile()
    {
        return mobile;
    }
    public void setMobile(String mobile)
    {
        this.mobile=mobile;
    }
    public String getFounder()
    {
        return founder;
    }
    public void setFounder(String founder)
    {
        this.founder=founder;
    }
    public Integer getNumberOfDept()
    {
        return numberOfDept;
    }
    public void setNumberOfDept(Integer numberOfDept)
    {
        this.numberOfDept=numberOfDept;
    }
    public String getLocation()
    {
        return location;
    }
    public void setLocation(String location)
    {
        this.location=location;
    }
    public Date getStartingDate()
    {
        return startingDate;
    }
    public void setStartingDate(Date startingDate)
    {
        this.startingDate=startingDate;
    }
    
    //whenever a class is created, it becomes the sub class of Object class. 
    //Object is the super class for any class.
    //Object class contains "toString()" method. which we override 
    public String toString()
    {
        // System.out.printf("%s","");          this will print
        // System.out.format("%s","");          this will print
        // String.format("%s","");              this method returns a String
        //problem is when date is displayed, it will by default, display in long format. To display in required format
        //we have to use SimpleDateFormat       methods:    format() and parse()        format converts Date into String.       parse is vice versa
        SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
        return String.format("Name: %s\nWebsite: %s\nMobile: %s\nFounder: %s\nNumber of Dept: %d\nLocation: %s\nStarting Date: %s\n",name,website,mobile,founder,numberOfDept,location,sdf.format(startingDate));
    }
    
        //whenever a class is created, it becomes the sub class of Object class. 
    //Object is the super class for any class.
    //Object class contains "equals()" method. which we override 
    public boolean equals(Object arg)
    {
        College temp=(College)arg;
        return this.getName().equalsIgnoreCase(temp.getName()) && this.getStartingDate().equals(temp.getStartingDate());
    }
}


-------------------
/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
import java.util.*;
import java.text.*;

public class Main
{
	public static void main(String[] args) throws ParseException
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter college 1 detail:");
		String detail1=sc.nextLine();
		System.out.println("Enter college 2 detail:");
		String detail2=sc.nextLine();
		
		//from the String, how to create an object of college?  2 ways   1) create an object and use setters to set values
		//2) create an object using all argument constructor
		//i am using 1st approach
		College college1=new College();
// 		IIT Madras,www.iitm.ac.in,7845612390,iit,16,Madras,15-12-1959
        //the above long string must be split into multiple parts using "," as a delimiter
        String arr1[]=detail1.split(",");
        college1.setName(arr1[0]);
        college1.setWebsite(arr1[1]);
        college1.setMobile(arr1[2]);
        college1.setFounder(arr1[3]);
        // college1.setNumberOfDept(arr1[4]);      //numberOfDept is Integer   but arr1[4] is a String
        college1.setNumberOfDept(Integer.parseInt(arr1[4]));
        college1.setLocation(arr1[5]);
        //convert the String arr1[5] to Date
        SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
        college1.setStartingDate(sdf.parse(arr1[6]));       //throws ParseException
        
        System.out.println(college1);
        

        College college2=new College();
        
        String arr2[]=detail2.split(",");
        college2.setName(arr2[0]);
        college2.setWebsite(arr2[1]);
        college2.setMobile(arr2[2]);
        college2.setFounder(arr2[3]);
        // college2.setNumberOfDept(arr2[4]);      //numberOfDept is Integer   but arr2[4] is a String
        college2.setNumberOfDept(Integer.parseInt(arr2[4]));
        college2.setLocation(arr2[5]);
        //convert the String arr2[5] to Date
        // SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
        college2.setStartingDate(sdf.parse(arr2[6]));       //throws ParseException
        
        System.out.println(college2);
        
        if(college1.equals(college2))
        {
            System.out.println("College 1 is same as College 2");
        }else{
            System.out.println("College 1 and College 2 are different");
        }
    
	}
}
-----------------
Challenge:
Java_Mock_21.docx
Requirement 1
