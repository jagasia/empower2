Day 14:

Auto-wiring, JDBC, ..), Java Servlets

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.2.7.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>5.2.7.RELEASE</version>
		</dependency>

Auto-wiring
-----------------
Auto wiring is the ability of the bean to automatically find and inject its dependencies from the available beans.


Autowire By Type
Autowire By Name
----------------------------
Whenever xml is used in java, there will be an option to use Annotations instead of xml.

How to mark a class as a Bean???????	using annotation???
	i) @Component
	ii) @Bean

Lets make Author class as a Bean:
	
---------------------
Activity:
Address
	dno
	street
	city
Customer
	id
	name
	address
	phone

Define both classes as beans and the customer should autowire the address.
use default constructors to set default values

pom.xml

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>5.2.7.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>5.2.7.RELEASE</version>
		</dependency>
------------------------------------------------------------------------------------------------------------------
We need to create Configuration class.	Do you remember, we created configuration file (xml)

@Configuration
public class MyConfiguration
{}


@Bean
	is also used to define beans
	But, this annotation cannot be used above a class definition.

	----------------------------

package com.empower.spring;

import org.springframework.stereotype.Component;

@Component("add3")
public class Address {
	private String dno;
	private String street;
	private String city;
	private String pincode;
	public Address(String dno, String street, String city, String pincode) {
		super();
		this.dno = dno;
		this.street = street;
		this.city = city;
		this.pincode = pincode;
	}
	
	public Address() {
		dno="5";
		street="Embassy tech village";
		city="Bengaluru";
	}

	public String getDno() {
		return dno;
	}

	public void setDno(String dno) {
		this.dno = dno;
	}

	public String getStreet() {
		return street;
	}

	public void setStreet(String street) {
		this.street = street;
	}

	public String getCity() {
		return city;
	}

	public void setCity(String city) {
		this.city = city;
	}

	public String getPincode() {
		return pincode;
	}

	public void setPincode(String pincode) {
		this.pincode = pincode;
	}

	@Override
	public String toString() {
		return "Address [dno=" + dno + ", street=" + street + ", city=" + city + ", pincode=" + pincode + "]";
	}
	
}


-----------------------
package com.empower.spring;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Component;

@Component
public class Customer {
	private Integer id;
	private String name;
	@Autowired
	@Qualifier("add1")
	private Address address;
	private String phone;
	public Customer(Integer id, String name, Address address, String phone) {
		super();
		this.id = id;
		this.name = name;
		this.address = address;
		this.phone = phone;
	}
	
	public Customer() {
		id=1;
		name="Chenna";
		phone="9898989898";
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Address getAddress() {
		return address;
	}

	public void setAddress(Address address) {
		this.address = address;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	@Override
	public String toString() {
		return "Customer [id=" + id + ", name=" + name + ", address=" + address + ", phone=" + phone + "]";
	}
	
}

------------------------------------------
package com.empower.spring;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan("com.empower.spring")
public class MyConfiguration {

	@Bean
	public Address add1()
	{
		return new Address("A123", "Bhoganahalli road", "Bengaluru", "560108");
	}
	
	@Bean
	public Address add2()
	{
		return new Address("B2", "Outer ring road", "Mysuru", "570109");
	}
	
	
}

--------------------------------------------
package com.empower.spring;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
    	AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext(MyConfiguration.class);
    	Customer customer = ctx.getBean(Customer.class);
    	System.out.println(customer);
    }
}

-------------------------------------------
Activity:
Understand the difference between @Component and @Bean
Define the beans and autowire by name
--------------------------------------------------
JdbcTemplate

1) pom.xml, the following dependency to be added
	   <dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>5.2.7.RELEASE</version>
</dependency>
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context-support</artifactId>
    <version>5.2.7.RELEASE</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>5.2.7.RELEASE</version>
</dependency>
<!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <version>2.2.222</version>
    <scope>test</scope>
</dependency>

2) Employee
	id
	firstName
	lastName
	salary

package com.empower.spring;

public class Employee {
	private Integer id;
	private String firstName;
	private String lastName;
	private Double salary;
	public Employee() {
		
	}
	public Employee(Integer id, String firstName, String lastName, Double salary) {
		super();
		this.id = id;
		this.firstName = firstName;
		this.lastName = lastName;
		this.salary = salary;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public Double getSalary() {
		return salary;
	}
	public void setSalary(Double salary) {
		this.salary = salary;
	}
	@Override
	public String toString() {
		return "Employee [id=" + id + ", firstName=" + firstName + ", lastName=" + lastName + ", salary=" + salary
				+ "]";
	}
	
}

3) EmployeeDaoImpl
package com.empower.spring;

public class EmployeeDaoImpl {
	public void create(Employee employee) {}
	public void read() {}
	public void read(Integer id) {}
	public void update(Employee employee) {}
	public void delete(Integer id) {}
	
}


4) Create a configuration class:	MyConfiguration.java
-----------------------------
SQL Developer
	\\its\its\sccm\apps
		copy the SQL Developer zip file to your c:\softwares folder
	unzip the sql developer zip to SQL Developer folder

	create short cut for sql developer exe
--------------------------
package com.empower.spring;

import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

@Configuration
@ComponentScan("com")
public class MyConfiguration {
	
	@Bean
	public DataSource dataSource()
	{
    	DriverManagerDataSource ds=new DriverManagerDataSource();
    	ds.setDriverClassName("org.h2.Driver");
    	ds.setUrl("jdbc:h2:file:./data/sampledata");
    	ds.setUsername("sa");
    	ds.setPassword("");
    	return ds;
	}
	
	@Bean
	public JdbcTemplate jdbcTemplate()
	{
		DataSource ds = dataSource();
		JdbcTemplate jt=new JdbcTemplate();
		jt.setDataSource(ds);
		return jt;
	}
}
