Day 27: (05-Oct-2023)
------------------------------
Filter
Map
Reduce
let, const, arrow functions, template literals, default parameters, object literals, rest and spread operators, destructuring assignment

The above Javascript ES6 features are important pre-requisites for learning React.

Arrow functions:
	it is similar to Lambda in Java
	
What is functional interface?
	an interface that has only 1 abstract method is a functional interface

What is marker interface?
	an interface that has no abstract method is a marker interface

what is lambda?
	whenever we want to implement a functional interface
	functional interface like	Runnable, Comparable, Comparator



public class MyThread implements Runnable
{
	public void run()
	{
	}
}


public class App
{
	public static void main(String args[])
	{
		MyThread mt=new MyThread();
		Thread t1=new Thread(mt);

		Thread t2=new Thread(()->{	/* code of run method here */ 	});


	}
}

->		this is lambda in java

=>		this is arrow function in javascript

---------------------------------------------
whenever we need to create a function and call a function,
we can consider using arrow functions


Map


var arr=[];
arr.push("india");
arr.push("pakistan");
arr.push("canada");
arr.push("china");
arr.push("sri lanka");
arr.push("bangladesh");
// arr.pop();
// console.log(arr)
arr.map((x)=>{
    console.log(x+" : "+x.length)
});

--------------------------------
Filter
var arr=[];
arr.push("india");
arr.push("pakistan");
arr.push("canada");
arr.push("china");
arr.push("sri lanka");
arr.push("bangladesh");

var arr2=arr.filter((x)=>{
    return x.length<6
});

console.log(arr2);


Activity:
	Javascript ES6 Arrow functions
	Map
	Filter
	Reduce


let vs var

var i=20;
let x=30;


template literal




The syntax for filter is similar to map, except the callback function should return true to keep the element, or false otherwise. In the callback, only the element is required.


default and rest parameters


Activity:
Filter
Map
Reduce
let, const, arrow functions, template literals, default parameters, object literals, rest and spread operators, destructuring assignment


--------------------------------------------------
ReactJs
	is not a framework
	is a library


npx
	npx create-react-app first-project
npm
	npm i -g create-react-app
	create-react-app first-project


	npm init react-app first-project


------------------------
Steps:

1) create a folder "React" 
2) go to cmd in this location
3) create a react js application:
	npx create-react-app first-project
4) cd first-project
5) open vs code here
	code .
6) run the project
	npm start
		
check	
	http://localhost:3000/


whenever i push the react project to git, "node_modules" folder is ignored.
when you pull my project to your computer, you will have to bring this "node_modules" by:
	npm install


------------------------------------------------------
Activity:
	Create a react folder
	create a "first-project"
	cd first-project
	npm start

open the project folder in vs code
edit app component
check browser.
-------------------------------------------
index.html

inside the <head> </head>
paste
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>


(or)
install bootstrap
	npm install bootstrap --save


index.js
	import 'bootstrap/dist/css/bootstrap.min.css';



---------------------------
What is a component?
	a reusable piece of code
	binds the templates and scripts together
	can be plugged or removed easily


how to create a component in react?
	there are 2 types of components in react:
		i) functional component
		ii) class component
	in both cases, we create a js file 


1) in src
	create a folder "Components"
2) in Components folder
	create a file "Hello.js"



Activity:

create a hi component
plug it in app component
check browser

Activity:
use props to allow parent component to send input to the child component

JSX
-----
	Javascript for XML
	Javascript extension



JSX vs HTML

return (<div><h1>Hello world</h1></div>)

vs

return React.createElement('div',null,'<h1>','Hello world','</h1>')
modified as
return React.createElement('div',null,React.createElement('h1',null,'Hello world')



---------------------------------
Class based component
-----------------------------------
import { Component } from "react";

class Welcome extends Component
{
    render()
    {
        return <h2>Welcome </h2>
    }
}

export default Welcome


to plug it in App component, same way

<Welcome />

---------------------
How to use Props in a class based component?
	use constructor


constructor(props)
{
	super(prop
}

---------------
After lunch, 

State

-------------------------------
You learned to
	create a reactjs application
	create a functional component
	create a class based component
	props	to allow parent component to send input to child component


State
	what is a state?

Create a class component called Counter
	You are #1 visitor


Solution:

const { Component } = require("react");

class Counter extends Component
{
    constructor(props)
    {
        super(props);

        this.state={"counter":0}
        this.fnUpdate=this.fnUpdate.bind(this);
    }

    fnUpdate()
    {
        this.setState({"counter":this.state.counter+1})
    }

    render()
    {
        // const {counter}=this.state
        return <div>
            You are #{this.state.counter} visitor
            <button onClick={ this.fnUpdate }>Click Me!</button>
            </div>
    }
}
export default Counter;

-----------------------------------------------------------------------------

const { Component } = require("react");

class Login extends Component
{
    constructor(props)
    {
        super(props)
        this.state={
            "username":"Sumanth",
            "password":"abcd",
            "status":""
        }
        this.fnValidateLogin=this.fnValidateLogin.bind(this);
        this.fn1=this.fn1.bind(this)
    }

    fnValidateLogin()
    {
        if(this.state.username==this.state.password)
        {
            this.setState({'status':'Failure'})
        }else
            this.setState({'status':'Success'})
    }

    fn1(event)
    {
        // alert(event.target.name)
        this.setState({[event.target.name]:event.target.value});
    }

    render()
    {
        return <div>
            
            Username:<input type="text" name="username" class="form-control" onChange={ this.fn1 } />
            Password:<input type="password" name="password" className="form-control" onChange={ this.fn1 }  />
            <br/>
            <input type="button" value="Login" class="btn btn-info" onClick={this.fnValidateLogin} />
            <br/>
            {/* <div>
                {this.state.username}<br/>
                {this.state.password}
            </div> */}
            {this.state.status}

        </div>
    }
}

export default Login

