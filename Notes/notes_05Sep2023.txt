Day 7:
Using IDE for java.	Integrated Development Environment
Most common IDE used for java is Eclipse
	other ides like netbeans, visual studio code, intelliJ 

Spring Tool Suite	is the IDE, i am using. Because, it will be useful for spring boot projects.

Spring ToolSuite	STS
STS is also an Eclipse (plus spring plugins)

Eclipse for Java developers (is only for core java)
Eclipse for Java EE developers

Support required:	install Java version 8 or later

Eclipse is allowed to download and unzip. No issues.

I will show you using eclipse.
while opening eclipse, it asks me to choose the directory as workspace.
We choose a folder in our system where all the projects i create in eclipse shall be stored.

the project name shall be all lowercase and multiple words are separated by -

ex:	05-sep-01

--------------------
OOPS concepts
	Inheritance
	Encapsulation
	Polymorphism
	Abstraction

these are the 4 pillers of OOPS

Inheritance:
	code reusability
	child class can inherit from parent
	we dont need to create a class from scratch
	we can derive a new class from existing class
	the child class behave like parent or it can override it
	is based on a concept called "Open - Close" principle
	Open to Extension. Close to Modification.	GoF

class ContractEmployee extends Employee

Types of inheritance:
	Single inheritance
	Multiple inheritance
	Multi-level inheritance
	Hybrid inheritance

Single inheritance
	only 1 super class
	how many sub class?		any number of sub class.

Multiple inheritance
	multiple super classes
	how many sub class?		any number of sub class.

Multi-Level inheritance
	Sub class is super class for another sub class
	how many sub class?		any number of sub class.

Hybrid 
	combination of any two types

Java does not support multiple inheritance.

class C extends A,B	//is not possible in java

Adharsh challenges us. He says Java supports multiple inheritance using Interface.
---------------------------------
Furniture
Chair
BookShelf

Furniture is not concrete. It is abstract. It can be a super class only.

1) Chair
2) BookShelf
3) Exit


What is a property of a class?
	any variable of a class that has getter/setter/both is a property.
	if only getter is there, then it is read-only property
	if only setter is there, then it is write-only property
	if both are there, then it is read-write property
	if both are not there, then it is not a property


Pending:
	Access specifiers

Order or constructors
	super class constructor
	sub class constructor


Activity:
	understand what are destructors in java.
	What is overriding
		constructor overriding
		method overriding
Overriding is the process of re-defining the super class method
-----------------------------------------
Shape
	String name
	String bgColor
	String borderColor
Circle
	calculateArea	method
		//3.14*r*r	just print a message like this
Triangle
	calculateArea
		//0.5*b*h
Rectangle
	calculateArea
		//l*b



\Java\05-sep-01\src\com\empower\demo
-------------------

sum(2,3);		//5
sum(12,12);	//24
sum("rama","krishna"	);	//ramakrishna
sum(3,4);		//7

different behavior?	
poly	=	many
morph	=	face		morphology

in above example, sum method is an example for polymorphism
	method overloading
		multiple methods, with same name, but different arguments (signature).
	
Method overloading:		there must be any of the following:
	i) number of arguments can be different
	ii) order of the type of arguments are different
	iii) type of the arguments are different
	
	iv) if the return type is the only difference, then not accepted
	v) return type can be same or different.

ex:

	int sum(int ,int)
	int sum(float, float)		//overloading

	float sum(int, float)
	int sum(int, float)		//not allowed

	int sum(int)
	int sum(float)		//overloading

sum(2,3);		//there must be only 1 method eligible 
-------------
methods
constructors
	can be overloaded.

2+3
"raja"+"sivakumar"
	see that + operator is already overloaded in java.
	we cannot do operator overloading in java.

-------------------
Overriding
	sub class defines a method which is already present in super class.
	in that case, signature must be same.

Overriding rules:
	sub class method name = super class method name
	sub class method signature (arguments) = super class method signature
	access specifier?	public/private/protected/<<default>>
	the sub class method cannot reduce the access
		public>protected>default>private
	if super class method is public, then sub class method can be public only.
	if super class method is protected, then sub class method can be protected/ public
	if super class method is default, then sub class method can be default/protected/public
	if super class method is private, then sub class does not override it. private methods of super class are not visible to sub class.

---------------------------------------------------------------
method overloading is an example for static polymorphism
	because, while creating a class itself it is visible

method overriding is an example for dynamic polymorphism
	because, while running the program only, it happens

static polymorphism	=	compile time polymorphism or stating binding or early binding
dynamic polymorphism=runtime polymorphism or late binding

1) Abstract class
2) Final class
3) Interface
4) overloading
5) overriding

Abstraction
	providing access to essential features	(access spec)
Encapsulation
	restrict access to private fields		(access spec)
Inheritance
Polymorphism
-----------------
Multiple inheritance in java?
	using interface?

public class A implements B,C
{}	//here, where is the benefit of inheritance?
	//it is not even inheritance.
interface
	is highest level of abstraction

What is the difference between interface and abstract class.

interface
	until jdk 1.7 does not allow us to have any method with body.
	means, from 1.8 onwards, interfaces allows methods with body, if they are static or default.


public interface Person {
	
}

what are allowed in an interface?
	only constants
	abstract methods (we dont mention)
	static methods
	default methods


public interface Person {
	public static final int AGE=20;
	void speak();
}
public class Student implements Person
{
	void speak()
	{
		System.out.println("Student speaks");
	}
	public static void main(String args[])
	{
		System.out.println("hello world");
		Student shahnawaz=new Student();		
		shahnawaz.speak();
	}
}


in interface, everything is public by default.
all data members automatically 
	public static final



static:
	a static method can be called with the classname/interface name	

static variable
	there exists only 1 copy of this variable for all objects
	of a class does not belong to any particular object of the class
static method
	can be called by using classname or object name
	we can call the static method without an object
static block
	is executed very early. Even before the first line of the main method.
----------------
Final
	final data member
		is constant
		while declaring, we must assign a value
		in java, constants are in FULL CAPITAL letters	 UPPERCASE
		Ex:		Integer.MAX_VALUE
	final method
		cannot be overridden
	final class
		cannot be inherited

abstract	
	abstract class	cannot be instantiated	instance=object
	abstract method	must be overridden by all sub class	

abstract
static
final

-----------------------
Eclipse extract should be completed.
After that open the eclipse folder.
You need to create a shortcut to the "eclipse" application.
	right click the eclipse.exe and send to desktop (shortcut)

Now, go to desktop and double click the eclipse shortcut
------------------------------------------------------------------------------
Exception
	while running the program, we get exceptions
	disrupts the flow of execution of the program
	syntax errors are not exception
	we discuss about runtime exceptions	(not compile time errors)

example:
	ArithmeticException



Exception is an abnormal event that might occur during the execution of the program.
For example, if java knows what to do, if the denominator is 0, then it is not exception.
But it does not know so, it is exception

CKR is creating Bank class and withdraw method.
class Bank
{
	public void withdraw(int amount)
	{
		if(amount>20000)
			throw new NumberFormatException("amount is invalid");
	}
}

Sumanth is creating a Main class and main method

public class Main
{
	public static void main(String []jags)
	{
	}
}


Exception types:
	Checked exception
	Unchecked exception

Checked exceptions:
	are checked by the compiler
	ex:	
		IOException
		ParseException
	A checked exception cannot be ignored. It must be
		handled (or)
		declare as thrown

Unchecked exceptions:
	are not checked by the compiler. They are visible at run time only.


throw
	is used to throw the exception

throws
	informs the compiler that this method throws these exceptions and does not handle. The calling method must handle these exceptions



Object		is the super class for all classes
	Throwable	
		Exception
			RuntimeException
		Error


all exception classes are derived from Exception
a class whose super class is Exception (directly) is a checked exception
a class whose super class is RuntimeException is an unchecked exception


1) exception
2) exception types
3) throw exception
4) declare checked exceptions using throws
5) handle exception using try-catch-finally
6) create user defined checked exception		extends Exception
7) create user defined unchecked exception		extends RuntimeException


try
	guarded section

catch	
	there can be many catch blocks
	there can be 0 or more catch blocks for a try block
finally
	there can be 0 or 1 finally block for a try block

try
catch


try
finally

try
catch
finally

try
catch
catch
finally

try(Scanner sc=new Scanner(System.in))
{
}		//this is not try block. this is try method.



Activity:
	Create a checked exception class
	Create an unchecked exception class
	Understand try-catch-finally
	Understand throw and throws
